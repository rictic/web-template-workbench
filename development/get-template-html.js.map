{"version":3,"file":"get-template-html.js","sourceRoot":"","sources":["../src/get-template-html.ts"],"names":[],"mappings":"AAAA,2EAA2E;AAE3E,OAAO,EAAa,UAAU,EAAC,MAAM,UAAU,CAAC;AAEhD,MAAM,CAAC,MAAM,oBAAoB,GAAG,OAAO,CAAC;AAE5C,yEAAyE;AACzE,gFAAgF;AAChF,0EAA0E;AAC1E,aAAa;AACb,MAAM,CAAC,MAAM,MAAM,GAAG,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;AAE/D,uDAAuD;AACvD,MAAM,CAAC,MAAM,WAAW,GAAG,GAAG,GAAG,MAAM,CAAC;AAExC,2EAA2E;AAC3E,sEAAsE;AACtE,MAAM,UAAU,GAAG,IAAI,WAAW,GAAG,CAAC;AAEtC,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;AAEzC;;;;;;;GAOG;AACH,MAAM,MAAM,GAAG,YAAY;IACzB,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,wBAAwB,EAAE;QAClD,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;KACrB,CAAC;IACJ,CAAC,CAAC,SAAS,CAAC;AAEd,MAAM,UAAU,uBAAuB,CACrC,GAAyB,EACzB,aAAqB;IAErB,gEAAgE;IAChE,6EAA6E;IAC7E,qEAAqE;IACrE,4DAA4D;IAC5D,+BAA+B;IAC/B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;QACrD,IAAI,OAAO,GAAG,gCAAgC,CAAC;QAC/C,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;KAC1B;IACD,OAAO,MAAM,KAAK,SAAS;QACzB,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa,CAAC;QAClC,CAAC,CAAE,aAAwC,CAAC;AAChD,CAAC;AAED,4EAA4E;AAC5E,2EAA2E;AAC3E,SAAS;AACT,6EAA6E;AAC7E,6BAA6B;AAC7B,uEAAuE;AACvE,0EAA0E;AAC1E,2EAA2E;AAC3E,iBAAiB;AAEjB;;;GAGG;AACH,MAAM,YAAY,GAAG,qDAAqD,CAAC;AAC3E,MAAM,aAAa,GAAG,CAAC,CAAC;AACxB,MAAM,QAAQ,GAAG,CAAC,CAAC;AACnB,MAAM,gBAAgB,GAAG,CAAC,CAAC;AAE3B,MAAM,eAAe,GAAG,MAAM,CAAC;AAC/B;;GAEG;AACH,MAAM,gBAAgB,GAAG,IAAI,CAAC;AAE9B,MAAM,UAAU,GAAG,aAAa,CAAC;AACjC,MAAM,eAAe,GAAG,qBAAqB,CAAC;AAC9C,MAAM,SAAS,GAAG,aAAa,CAAC;AAEhC;;;;;GAKG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,oCAAoC,CAAC;AAEnE;;;;;;;;;;;;;;;;;;;;;GAqBG;AACH,MAAM,WAAW,GAAG,IAAI,MAAM,CAC5B,KAAK,UAAU,OAAO,SAAS,MAAM,UAAU,KAAK,UAAU,OAAO,eAAe,cAAc,EAClG,GAAG,CACJ,CAAC;AACF,MAAM,YAAY,GAAG,CAAC,CAAC;AACvB,MAAM,cAAc,GAAG,CAAC,CAAC;AACzB,MAAM,iBAAiB,GAAG,CAAC,CAAC;AAC5B,MAAM,UAAU,GAAG,CAAC,CAAC;AAErB,MAAM,uBAAuB,GAAG,IAAI,CAAC;AACrC,MAAM,uBAAuB,GAAG,IAAI,CAAC;AAErC;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,OAA6B,EAC7B,IAAgB,EACc,EAAE;IAChC,oEAAoE;IACpE,2EAA2E;IAC3E,0EAA0E;IAC1E,yEAAyE;IACzE,yEAAyE;IACzE,iCAAiC;IACjC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7B,wEAAwE;IACxE,oEAAoE;IACpE,iEAAiE;IACjE,MAAM,SAAS,GAAkB,EAAE,CAAC;IACpC,IAAI,IAAI,GAAG,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;IAE9C,sEAAsE;IACtE,uEAAuE;IACvE,gCAAgC;IAChC,IAAI,eAAmC,CAAC;IAExC,sEAAsE;IACtE,UAAU;IACV,IAAI,KAAK,GAAG,YAAY,CAAC;IAEzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1B,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACrB,gEAAgE;QAChE,oEAAoE;QACpE,mDAAmD;QACnD,oEAAoE;QACpE,kDAAkD;QAClD,IAAI,gBAAgB,GAAG,CAAC,CAAC,CAAC;QAC1B,IAAI,QAA4B,CAAC;QACjC,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,KAA8B,CAAC;QAEnC,sEAAsE;QACtE,iEAAiE;QACjE,OAAO,SAAS,GAAG,CAAC,CAAC,MAAM,EAAE;YAC3B,iEAAiE;YACjE,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;YAC5B,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,KAAK,KAAK,IAAI,EAAE;gBAClB,MAAM;aACP;YACD,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;YAC5B,IAAI,KAAK,KAAK,YAAY,EAAE;gBAC1B,IAAI,KAAK,CAAC,aAAa,CAAC,KAAK,KAAK,EAAE;oBAClC,KAAK,GAAG,eAAe,CAAC;iBACzB;qBAAM,IAAI,KAAK,CAAC,aAAa,CAAC,KAAK,SAAS,EAAE;oBAC7C,uCAAuC;oBACvC,KAAK,GAAG,gBAAgB,CAAC;iBAC1B;qBAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;oBACxC,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE;wBACxC,6DAA6D;wBAC7D,oCAAoC;wBACpC,eAAe,GAAG,IAAI,MAAM,CAAC,KAAK,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;qBAC3D;oBACD,KAAK,GAAG,WAAW,CAAC;iBACrB;qBAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,KAAK,SAAS,EAAE;oBAChD,KAAK,GAAG,WAAW,CAAC;iBACrB;aACF;iBAAM,IAAI,KAAK,KAAK,WAAW,EAAE;gBAChC,IAAI,KAAK,CAAC,YAAY,CAAC,KAAK,GAAG,EAAE;oBAC/B,+DAA+D;oBAC/D,QAAQ;oBACR,KAAK,GAAG,eAAe,IAAI,YAAY,CAAC;oBACxC,gEAAgE;oBAChE,qCAAqC;oBACrC,gBAAgB,GAAG,CAAC,CAAC,CAAC;iBACvB;qBAAM,IAAI,KAAK,CAAC,cAAc,CAAC,KAAK,SAAS,EAAE;oBAC9C,0BAA0B;oBAC1B,gBAAgB,GAAG,CAAC,CAAC,CAAC;iBACvB;qBAAM;oBACL,gBAAgB,GAAG,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC;oBACrE,QAAQ,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC;oBACjC,KAAK;wBACH,KAAK,CAAC,UAAU,CAAC,KAAK,SAAS;4BAC7B,CAAC,CAAC,WAAW;4BACb,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,GAAG;gCAC3B,CAAC,CAAC,uBAAuB;gCACzB,CAAC,CAAC,uBAAuB,CAAC;iBAC/B;aACF;iBAAM,IACL,KAAK,KAAK,uBAAuB;gBACjC,KAAK,KAAK,uBAAuB,EACjC;gBACA,KAAK,GAAG,WAAW,CAAC;aACrB;iBAAM,IAAI,KAAK,KAAK,eAAe,IAAI,KAAK,KAAK,gBAAgB,EAAE;gBAClE,KAAK,GAAG,YAAY,CAAC;aACtB;iBAAM;gBACL,mEAAmE;gBACnE,iEAAiE;gBACjE,KAAK,GAAG,WAAW,CAAC;gBACpB,eAAe,GAAG,SAAS,CAAC;aAC7B;SACF;QAED,sBAAsB;QACtB,4DAA4D;QAC5D,yDAAyD;QACzD,qEAAqE;QACrE,kEAAkE;QAClE,yEAAyE;QACzE,oBAAoB;QACpB,sEAAsE;QACtE,qEAAqE;QACrE,wCAAwC;QAExC,sEAAsE;QACtE,wCAAwC;QACxC,MAAM,GAAG,GACP,KAAK,KAAK,WAAW,IAAI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACtE,IAAI;YACF,KAAK,KAAK,YAAY;gBACpB,CAAC,CAAC,CAAC,GAAG,UAAU;gBAChB,CAAC,CAAC,gBAAgB,IAAI,CAAC;oBACvB,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,QAAS,CAAC;wBAC1B,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAgB,CAAC;4BAC1B,oBAAoB;4BACpB,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;wBAC5B,MAAM;wBACN,GAAG;oBACL,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;KACxD;IAED,MAAM,UAAU,GACd,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAEvE,qCAAqC;IACrC,OAAO,CAAC,uBAAuB,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE,SAAS,CAAC,CAAC;AACnE,CAAC,CAAC","sourcesContent":["// Added to an attribute name to mark the attribute as bound so we can find\n\nimport {ResultType, SVG_RESULT} from './ttl.js';\n\nexport const boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nexport const marker = `lit$${String(Math.random()).slice(9)}$`;\n\n// String used to tell if a comment is a marker comment\nexport const markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst trustedTypes = window.trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('web-template-workbench', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\nexport function trustFromTemplateString(\n  tsa: TemplateStringsArray,\n  stringFromTSA: string\n): TrustedHTML {\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!Array.isArray(tsa) || !tsa.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    throw new Error(message);\n  }\n  return policy !== undefined\n    ? policy.createHTML(stringFromTSA)\n    : (stringFromTSA as unknown as TrustedHTML);\n}\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nexport const rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment markers denoting the `ChildPart`s\n * and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nexport const getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string> = [];\n  let html = type === SVG_RESULT ? '<svg>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n              ? doubleQuoteAttrEndRegex\n              : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n        ? (attrNames.push(attrName!),\n          s.slice(0, attrNameEndIndex) +\n            boundAttributeSuffix +\n            s.slice(attrNameEndIndex)) +\n          marker +\n          end\n        : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n\n  // Returned as an array for terseness\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n"]}