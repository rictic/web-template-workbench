{"version":3,"file":"join_test.js","sourceRoot":"","sources":["../../../src/test/directives/join_test.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,OAAO,EAAC,IAAI,EAAC,MAAM,gBAAgB,CAAC;AACpC,OAAO,EAAC,WAAW,EAAC,MAAM,gCAAgC,CAAC;AAE3D,OAAO,EAAC,IAAI,EAAC,MAAM,0BAA0B,CAAC;AAE9C,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE;IACjB,IAAI,SAAyB,CAAC;IAE9B,MAAM,EAAC,YAAY,EAAC,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;IAEpD,KAAK,CAAC,GAAG,EAAE;QACT,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;QACtB,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC5B,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC1B,YAAY,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;QACzB,QAAQ,CAAC,CAAC,OAAO,CAAI,KAAe;YAClC,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;gBACrB,MAAM,CAAC,CAAC;aACT;QACH,CAAC;QACD,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;QACxB,YAAY,CACV,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAA,MAAM,CAAC,MAAM,CAAC,EAC/C,qBAAqB,CACtB,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {html} from '../../index.js';\nimport {makeAsserts} from '../test-utils/assert-render.js';\n\nimport {join} from '../../directives/join.js';\n\nsuite('join', () => {\n  let container: HTMLDivElement;\n\n  const {assertRender} = makeAsserts(() => container);\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  test('with array', () => {\n    assertRender(join(['a', 'b', 'c'], ','), 'a,b,c');\n  });\n\n  test('with empty array', () => {\n    assertRender(join([], ','), '');\n  });\n\n  test('with undefined', () => {\n    assertRender(join(undefined, ','), '');\n  });\n\n  test('with iterable', () => {\n    function* iterate<T>(items: Array<T>) {\n      for (const i of items) {\n        yield i;\n      }\n    }\n    assertRender(join(iterate(['a', 'b', 'c']), ','), 'a,b,c');\n  });\n\n  test('passes index', () => {\n    assertRender(\n      join(['a', 'b', 'c'], (i) => html`<p>${i}</p>`),\n      'a<p>0</p>b<p>1</p>c'\n    );\n  });\n});\n"]}