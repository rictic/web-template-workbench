{"version":3,"file":"async-append_test.js","sourceRoot":"","sources":["../../../src/test/directives/async-append_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {asyncAppend} from '../../directives/async-append.js';\nimport {render, html, nothing} from '../../index.js';\nimport {TestAsyncIterable} from './test-async-iterable.js';\nimport {assert} from '@esm-bundle/chai';\nimport {memorySuite} from '../test-utils/memory.js';\nimport {makeAsserts} from '../test-utils/assert-render.js';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nconst nextFrame = () =>\n  new Promise<void>((r) => requestAnimationFrame(() => r()));\n\nsuite('asyncAppend', () => {\n  let container: HTMLDivElement;\n  let iterable: TestAsyncIterable<string>;\n\n  setup(() => {\n    container = document.createElement('div');\n    iterable = new TestAsyncIterable<string>();\n  });\n\n  const {assertContent} = makeAsserts(() => container);\n\n  test('appends content as the async iterable yields new values', async () => {\n    render(html`<div>${asyncAppend(iterable)}</div>`, container);\n    assertContent('<div></div>');\n\n    await iterable.push('foo');\n    assertContent('<div>foo</div>');\n\n    await iterable.push('bar');\n    assertContent('<div>foobar</div>');\n  });\n\n  test('appends nothing with a value is undefined', async () => {\n    render(html`<div>${asyncAppend(iterable)}</div>`, container);\n    assertContent('<div></div>');\n\n    await iterable.push('foo');\n    assertContent('<div>foo</div>');\n\n    await iterable.push(undefined as unknown as string);\n    assertContent('<div>foo</div>');\n  });\n\n  test('uses a mapper function', async () => {\n    render(\n      html`<div>${asyncAppend(iterable, (v, i) => html`${i}: ${v} `)}</div>`,\n      container\n    );\n    assertContent('<div></div>');\n\n    await iterable.push('foo');\n    assertContent('<div>0: foo </div>');\n\n    await iterable.push('bar');\n    assertContent('<div>0: foo 1: bar </div>');\n  });\n\n  test('renders new iterable over a pending iterable', async () => {\n    const t = (iterable: any) => html`<div>${asyncAppend(iterable)}</div>`;\n    render(t(iterable), container);\n    assertContent('<div></div>');\n\n    await iterable.push('foo');\n    assertContent('<div>foo</div>');\n\n    const iterable2 = new TestAsyncIterable<string>();\n    render(t(iterable2), container);\n\n    // The last value is preserved until we receive the first\n    // value from the new iterable\n    assertContent('<div>foo</div>');\n\n    await iterable2.push('hello');\n    assertContent('<div>hello</div>');\n\n    await iterable.push('bar');\n    assertContent('<div>hello</div>');\n  });\n\n  test('renders new value over a pending iterable', async () => {\n    const t = (v: any) => html`<div>${v}</div>`;\n    // This is a little bit of an odd usage of directives as values, but it\n    // is possible, and we check here that asyncAppend plays nice in this case\n    render(t(asyncAppend(iterable)), container);\n    assertContent('<div></div>');\n\n    await iterable.push('foo');\n    assertContent('<div>foo</div>');\n\n    render(t('hello'), container);\n    assertContent('<div>hello</div>');\n\n    await iterable.push('bar');\n    assertContent('<div>hello</div>');\n  });\n\n  test('does not render the first value if it is replaced first', async () => {\n    const iterable2 = new TestAsyncIterable<string>();\n\n    const component = (value: any) => html`<p>${asyncAppend(value)}</p>`;\n\n    render(component(iterable), container);\n    render(component(iterable2), container);\n\n    await iterable2.push('fast');\n\n    // This write should not render, since the whole iterator was replaced\n    await iterable.push('slow');\n\n    assertContent('<p>fast</p>');\n  });\n\n  suite('disconnection', () => {\n    test('does not render when iterable resolves while disconnected', async () => {\n      const component = (value: any) => html`<p>${asyncAppend(value)}</p>`;\n      const part = render(component(iterable), container);\n      await iterable.push('1');\n      assertContent('<p>1</p>');\n      part.setConnected(false);\n      await iterable.push('2');\n      assertContent('<p>1</p>');\n      part.setConnected(true);\n      await nextFrame();\n      assertContent('<p>12</p>');\n      await iterable.push('3');\n      assertContent('<p>123</p>');\n    });\n\n    test('disconnection thrashing', async () => {\n      const component = (value: any) => html`<p>${asyncAppend(value)}</p>`;\n      const part = render(component(iterable), container);\n      await iterable.push('1');\n      assertContent('<p>1</p>');\n      part.setConnected(false);\n      await iterable.push('2');\n      part.setConnected(true);\n      part.setConnected(false);\n      await nextFrame();\n      assertContent('<p>1</p>');\n      part.setConnected(true);\n      await nextFrame();\n      assertContent('<p>12</p>');\n      await iterable.push('3');\n      assertContent('<p>123</p>');\n    });\n\n    test('does not render when newly rendered while disconnected', async () => {\n      const component = (value: any) => html`<p>${value}</p>`;\n      const part = render(component('static'), container);\n      assertContent('<p>static</p>');\n      part.setConnected(false);\n      render(component(asyncAppend(iterable)), container);\n      await iterable.push('1');\n      assertContent('<p>static</p>');\n      part.setConnected(true);\n      await nextFrame();\n      assertContent('<p>1</p>');\n      await iterable.push('2');\n      assertContent('<p>12</p>');\n    });\n\n    test('does not render when resolved and changed while disconnected', async () => {\n      const component = (value: any) => html`<p>${value}</p>`;\n      const part = render(component('staticA'), container);\n      assertContent('<p>staticA</p>');\n      part.setConnected(false);\n      render(component(asyncAppend(iterable)), container);\n      await iterable.push('1');\n      assertContent('<p>staticA</p>');\n      render(component('staticB'), container);\n      assertContent('<p>staticB</p>');\n      part.setConnected(true);\n      await nextFrame();\n      assertContent('<p>staticB</p>');\n      await iterable.push('2');\n      assertContent('<p>staticB</p>');\n    });\n\n    test('the same promise can be rendered into two asyncAppend instances', async () => {\n      const component = (iterable: AsyncIterable<unknown>) =>\n        html`<p>${asyncAppend(iterable)}</p><p>${asyncAppend(iterable)}</p>`;\n      render(component(iterable), container);\n      assertContent('<p></p><p></p>');\n      await iterable.push('1');\n      assertContent('<p>1</p><p>1</p>');\n      await iterable.push('2');\n      assertContent('<p>12</p><p>12</p>');\n    });\n  });\n\n  memorySuite('memory leak tests', () => {\n    test('tree with asyncAppend cleared while iterables are pending', async () => {\n      const template = (v: unknown) => html`<div>${v}</div>`;\n      // Make a big array set on an expando to exaggerate any leaked DOM\n      const big = () => new Array(10000).fill(0);\n      // Hold onto the iterables to prevent them from being gc'ed\n      const iterables: Array<TestAsyncIterable<string>> = [];\n      window.gc();\n      const heap = performance.memory.usedJSHeapSize;\n      for (let i = 0; i < 1000; i++) {\n        // Iterable passed to asyncAppend that will never yield\n        const iterable = new TestAsyncIterable<string>();\n        iterables.push(iterable);\n        // Render the directive into a `<span>` with a 10kb expando, to exaggerate\n        // when DOM is not being gc'ed\n        render(\n          template(html`<span .p=${big()}>${asyncAppend(iterable)}</span>`),\n          container\n        );\n        // Clear the `<span>` + directive\n        render(template(nothing), container);\n      }\n      window.gc();\n      // Allow a 50% margin of heap growth; due to the 10kb expando, an actual\n      // DOM leak will be orders of magnitude larger\n      assert.isAtMost(\n        performance.memory.usedJSHeapSize,\n        heap * 2,\n        'memory leak detected'\n      );\n    });\n  });\n});\n"]}