{"version":3,"file":"ref_test.js","sourceRoot":"","sources":["../../../src/test/directives/ref_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {html, render} from '../../index.js';\nimport {ref, createRef, RefOrCallback} from '../../directives/ref.js';\nimport {assert} from '@esm-bundle/chai';\nimport {domPartsSupported} from '../../modes.js';\n\nsuite('ref', () => {\n  let container: HTMLDivElement;\n\n  setup(() => {\n    container = document.createElement('div');\n  });\n\n  test('sets a ref on a Ref object', () => {\n    const divRef = createRef();\n    render(html`<div ${ref(divRef)}></div>`, container);\n    const div = container.firstElementChild;\n    assert.equal(divRef.value, div);\n  });\n\n  test('calls a ref callback', () => {\n    let divRef: Element | undefined;\n    const divCallback = (el: Element | undefined) => (divRef = el);\n    render(html`<div ${ref(divCallback)}></div>`, container);\n    const div = container.firstElementChild;\n    assert.equal(divRef, div);\n  });\n\n  test('sets a ref when Ref object changes', () => {\n    const divRef1 = createRef();\n    const divRef2 = createRef();\n\n    const go = (r: RefOrCallback) =>\n      render(html`<div ${ref(r)}></div>`, container);\n    go(divRef1);\n    const div1 = container.firstElementChild;\n    assert.equal(divRef1.value, div1);\n\n    go(divRef2);\n    const div2 = container.firstElementChild;\n    assert.equal(divRef1.value, undefined);\n    assert.equal(divRef2.value, div2);\n  });\n\n  test('calls a ref callback when callback changes', () => {\n    let divRef: Element | undefined;\n    const divCallback1 = (el: Element | undefined) => (divRef = el);\n    const divCallback2 = (el: Element | undefined) => (divRef = el);\n\n    const go = (r: RefOrCallback) =>\n      render(html`<div ${ref(r)}></div>`, container);\n\n    go(divCallback1);\n    const div1 = container.firstElementChild;\n    assert.equal(divRef, div1);\n\n    go(divCallback2);\n    const div2 = container.firstElementChild;\n    assert.equal(divRef, div2);\n  });\n\n  test('only sets a ref when element changes', () => {\n    let queriedEl: Element | null;\n    let callCount = 0;\n    const elRef = createRef();\n\n    // Patch Ref to observe value changes\n    let value: Element | undefined;\n    Object.defineProperty(elRef, 'value', {\n      set(v: Element | undefined) {\n        value = v;\n        callCount++;\n      },\n      get() {\n        return value;\n      },\n    });\n\n    const go = (x: boolean) =>\n      render(\n        x ? html`<div ${ref(elRef)}></div>` : html`<span ${ref(elRef)}></span>`,\n        container\n      );\n\n    go(true);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'DIV');\n    assert.equal(elRef.value, queriedEl);\n    assert.equal(callCount, 1);\n\n    go(true);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'DIV');\n    assert.equal(elRef.value, queriedEl);\n    assert.equal(callCount, 1);\n\n    go(false);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'SPAN');\n    assert.equal(elRef.value, queriedEl);\n    assert.equal(callCount, 2);\n  });\n\n  test('only calls a ref callback when element changes', () => {\n    let queriedEl: Element | null;\n    const calls: Array<string | undefined> = [];\n    const elCallback = (e: Element | undefined) => {\n      calls.push(e?.tagName);\n    };\n    const go = (x: boolean) =>\n      render(\n        x\n          ? html`<div ${ref(elCallback)}></div>`\n          : html`<span ${ref(elCallback)}></span>`,\n        container\n      );\n\n    go(true);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'DIV');\n    assert.deepEqual(calls, ['DIV']);\n\n    go(true);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'DIV');\n    assert.deepEqual(calls, ['DIV']);\n\n    go(false);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'SPAN');\n    assert.deepEqual(calls, ['DIV', undefined, 'SPAN']);\n\n    go(true);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'DIV');\n    assert.deepEqual(calls, ['DIV', undefined, 'SPAN', undefined, 'DIV']);\n  });\n\n  test('calls callback bound to options.host', () => {\n    class Host {\n      bool = false;\n      calls: Array<string | undefined> = [];\n      root = document.createElement('div');\n      elCallback(e: Element | undefined) {\n        this.calls.push(e?.tagName);\n      }\n      render() {\n        return render(\n          this.bool\n            ? html`<div ${ref(this.elCallback)}></div>`\n            : html`<span ${ref(this.elCallback)}></span>`,\n          this.root,\n          {host: this, useDomParts: domPartsSupported}\n        );\n      }\n    }\n\n    const testRef = (\n      host: Host,\n      initialCalls: Array<string | undefined> = []\n    ) => {\n      let queriedEl: Element | null;\n      host.bool = true;\n      host.render();\n      queriedEl = host.root.firstElementChild;\n      assert.equal(queriedEl?.tagName, 'DIV');\n      assert.deepEqual(host.calls, [...initialCalls, 'DIV']);\n\n      host.bool = true;\n      host.render();\n      queriedEl = host.root.firstElementChild;\n      assert.equal(queriedEl?.tagName, 'DIV');\n      assert.deepEqual(host.calls, [...initialCalls, 'DIV']);\n\n      host.bool = false;\n      host.render();\n      queriedEl = host.root.firstElementChild;\n      assert.equal(queriedEl?.tagName, 'SPAN');\n      assert.deepEqual(host.calls, [...initialCalls, 'DIV', undefined, 'SPAN']);\n\n      host.bool = true;\n      host.render();\n      queriedEl = host.root.firstElementChild;\n      assert.equal(queriedEl?.tagName, 'DIV');\n      assert.deepEqual(host.calls, [\n        ...initialCalls,\n        'DIV',\n        undefined,\n        'SPAN',\n        undefined,\n        'DIV',\n      ]);\n    };\n\n    // Test first instance\n    const host1 = new Host();\n    testRef(host1);\n\n    // Test second instance\n    const host2 = new Host();\n    testRef(host2);\n\n    // Test on first instance again\n    // (reset boolean to render SPAN, so we see an initial change\n    // back to DIV)\n    host1.bool = false;\n    host1.render();\n    // Add in an undefined call for the initial switch from SPAN back to DIV\n    testRef(host1, [...host1.calls, undefined]);\n  });\n\n  test('two refs', () => {\n    const divRef1 = createRef();\n    const divRef2 = createRef();\n    render(html`<div ${ref(divRef1)} ${ref(divRef2)}></div>`, container);\n    const div = container.firstElementChild;\n    assert.equal(divRef1.value, div);\n    assert.equal(divRef2.value, div);\n  });\n\n  test('two ref callbacks alternating', () => {\n    let queriedEl: Element | null;\n    const divCalls: Array<string | undefined> = [];\n    const divCallback = (e: Element | undefined) => {\n      divCalls.push(e?.tagName);\n    };\n    const spanCalls: Array<string | undefined> = [];\n    const spanCallback = (e: Element | undefined) => {\n      spanCalls.push(e?.tagName);\n    };\n    const go = (x: boolean) =>\n      render(\n        x\n          ? html`<div ${ref(divCallback)}></div>`\n          : html`<span ${ref(spanCallback)}></span>`,\n        container\n      );\n\n    go(true);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'DIV');\n    assert.deepEqual(divCalls, ['DIV']);\n    assert.deepEqual(spanCalls, []);\n\n    go(true);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'DIV');\n    assert.deepEqual(divCalls, ['DIV']);\n    assert.deepEqual(spanCalls, []);\n\n    go(false);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'SPAN');\n    assert.deepEqual(divCalls, ['DIV', undefined]);\n    assert.deepEqual(spanCalls, ['SPAN']);\n\n    go(true);\n    queriedEl = container.firstElementChild;\n    assert.equal(queriedEl?.tagName, 'DIV');\n    assert.deepEqual(divCalls, ['DIV', undefined, 'DIV']);\n    assert.deepEqual(spanCalls, ['SPAN', undefined]);\n  });\n\n  test('refs are always set in tree order', () => {\n    const elRef = createRef();\n    const go = () =>\n      render(\n        html`\n        <div id=\"first\" ${ref(elRef)}></div>\n        <div id=\"next\" ${ref(elRef)}>\n          ${html`<span id=\"last\" ${ref(elRef)}></span>`}\n        </div>`,\n        container\n      );\n\n    go();\n    assert.equal(elRef.value!.id, 'last');\n    go();\n    assert.equal(elRef.value!.id, 'last');\n  });\n\n  test('callbacks are always called in tree order', () => {\n    const calls: Array<string | undefined> = [];\n    const elCallback = (e: Element | undefined) => {\n      calls.push(e?.id);\n    };\n    const go = () =>\n      render(\n        html`\n        <div id=\"first\" ${ref(elCallback)}></div>\n        <div id=\"next\" ${ref(elCallback)}>\n          ${html`<span id=\"last\" ${ref(elCallback)}></span>`}\n        </div>`,\n        container\n      );\n\n    go();\n    assert.deepEqual(calls, ['first', undefined, 'next', undefined, 'last']);\n    calls.length = 0;\n    go();\n    assert.deepEqual(calls, [\n      undefined,\n      'first',\n      undefined,\n      'next',\n      undefined,\n      'last',\n    ]);\n  });\n\n  test('Ref passed to ref directive changes', () => {\n    const aRef = createRef();\n    const bRef = createRef();\n    const go = (x: boolean) =>\n      render(html`<div ${ref(x ? aRef : bRef)}></div>`, container);\n\n    go(true);\n    assert.equal(aRef.value?.tagName, 'DIV');\n    assert.equal(bRef.value, undefined);\n    go(false);\n    assert.equal(aRef.value, undefined);\n    assert.equal(bRef.value?.tagName, 'DIV');\n    go(true);\n    assert.equal(aRef.value?.tagName, 'DIV');\n    assert.equal(bRef.value, undefined);\n  });\n\n  test('callback passed to ref directive changes', () => {\n    const aCalls: Array<string | undefined> = [];\n    const aCallback = (el: Element | undefined) => aCalls.push(el?.tagName);\n    const bCalls: Array<string | undefined> = [];\n    const bCallback = (el: Element | undefined) => bCalls.push(el?.tagName);\n    const go = (x: boolean) =>\n      render(html`<div ${ref(x ? aCallback : bCallback)}></div>`, container);\n\n    go(true);\n    assert.deepEqual(aCalls, ['DIV']);\n    assert.deepEqual(bCalls, []);\n    go(false);\n    assert.deepEqual(aCalls, ['DIV', undefined]);\n    assert.deepEqual(bCalls, ['DIV']);\n    go(true);\n    assert.deepEqual(aCalls, ['DIV', undefined, 'DIV']);\n    assert.deepEqual(bCalls, ['DIV', undefined]);\n  });\n\n  test('new callback created each render', () => {\n    const calls: Array<string | undefined> = [];\n    const go = () =>\n      render(\n        html`<div ${ref((el) => calls.push(el?.tagName))}></div>`,\n        container\n      );\n    go();\n    assert.deepEqual(calls, ['DIV']);\n    go();\n    assert.deepEqual(calls, ['DIV', undefined, 'DIV']);\n    go();\n    assert.deepEqual(calls, ['DIV', undefined, 'DIV', undefined, 'DIV']);\n  });\n});\n"]}