{"version":3,"file":"index_test.js","sourceRoot":"","sources":["../../src/test/index_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {\n  ChildPart,\n  noChange,\n  nothing,\n  render,\n  svg,\n  TemplateResult,\n  SVGTemplateResult,\n  SanitizerFactory,\n  Part,\n  CompiledTemplate,\n  _testOnlyClearSanitizerFactoryDoNotCallOrElse,\n  setSanitizer,\n  html,\n} from '../index.js';\nimport {\n  commentTest,\n  compiledSuite,\n  rawTest,\n  skipIfDomParts,\n} from './test-utils/dom-parts.js';\nimport {\n  directive,\n  Directive,\n  PartType,\n  PartInfo,\n  DirectiveParameters,\n} from '../directive.js';\nimport {assert} from '@esm-bundle/chai';\nimport {stripExpressionComments} from '@lit-labs/testing';\nimport {repeat} from '../directives/repeat.js';\nimport {AsyncDirective} from '../async-directive.js';\n\nimport {createRef, ref} from '../directives/ref.js';\n\n// For compiled template tests\nimport {_$LH} from '../private-ssr-support.js';\nimport {until} from '../directives/until.js';\nimport {DEV_MODE, domPartsSupported} from '../modes.js';\nimport {makeAsserts} from './test-utils/assert-render.js';\nconst {AttributePart} = _$LH;\n\ntype AttributePart = InstanceType<typeof AttributePart>;\n\nconst ua = window.navigator.userAgent;\nconst isIe = ua.indexOf('Trident/') > 0;\n\nclass FireEventDirective extends Directive {\n  render() {\n    return nothing;\n  }\n  override update(part: AttributePart) {\n    part.element.dispatchEvent(\n      new CustomEvent('test-event', {\n        bubbles: true,\n      })\n    );\n    return nothing;\n  }\n}\nconst fireEvent = directive(FireEventDirective);\n\nsuite('lit-html', () => {\n  let container: HTMLDivElement;\n\n  setup(() => {\n    container = document.createElement('div');\n    container.id = 'container';\n  });\n\n  const {assertRender, assertContent} = makeAsserts(() => container);\n\n  /**\n   * These test the ability to insert the correct expression marker into the\n   * HTML string before being parsed by innerHTML. Some of the tests have\n   * malformed HTML to test for reasonable (non-crashing) behavior in edge\n   * cases, though the exact behavior is undefined.\n   */\n  suite('marker insertion', () => {\n    test('only text', () => {\n      assertRender(html`${'A'}`, 'A');\n    });\n\n    test('attribute-like text', () => {\n      assertRender(html`a=${'A'}`, 'a=A');\n    });\n\n    test('< in text', () => {\n      assertRender(html`a < ${'b'}`, 'a &lt; b');\n    });\n\n    test('after tag-like in text', () => {\n      assertRender(html`a <1a> ${'b'}`, 'a &lt;1a&gt; b');\n      assertRender(html`a <-a> ${'b'}`, 'a &lt;-a&gt; b');\n      assertRender(html`a <:a> ${'b'}`, 'a &lt;:a&gt; b');\n    });\n\n    test('text child', () => {\n      assertRender(html`<div>${'A'}</div>`, '<div>A</div>');\n    });\n\n    test('text child of various tag names', () => {\n      assertRender(html`<x-foo>${'A'}</x-foo>`, '<x-foo>A</x-foo>');\n      assertRender(html`<x=foo>${'A'}</x=foo>`, '<x=foo>A</x=foo>');\n      assertRender(html`<x:foo>${'A'}</x:foo>`, '<x:foo>A</x:foo>');\n      assertRender(html`<x1>${'A'}</x1>`, '<x1>A</x1>');\n    });\n\n    test('text after self-closing tag', () => {\n      assertRender(html`<input />${'A'}`, '<input>A');\n      assertRender(\n        html`<!-- @ts-ignore --><x-foo />${'A'}`,\n        '<!-- @ts-ignore --><x-foo>A</x-foo>'\n      );\n    });\n\n    rawTest('text child of element with unbound quoted attribute', () => {\n      assertRender(html`<div a=\"b\">${'d'}</div>`, '<div a=\"b\">d</div>');\n\n      render(html`<script a=\"b\" type=\"foo\">${'d'}</script>`, container);\n      assert.include(\n        [\n          '<script a=\"b\" type=\"foo\">d</script>',\n          '<script type=\"foo\" a=\"b\">d</script>',\n        ],\n        stripExpressionComments(container.innerHTML)\n      );\n    });\n\n    rawTest('text child of element with unbound unquoted attribute', () => {\n      assertRender(html`<div a=b>${'d'}</div>`, '<div a=\"b\">d</div>');\n\n      render(html`<script a=b type=\"foo\">${'d'}</script>`, container);\n      assert.include(\n        [\n          '<script a=\"b\" type=\"foo\">d</script>',\n          '<script type=\"foo\" a=\"b\">d</script>',\n        ],\n        stripExpressionComments(container.innerHTML)\n      );\n    });\n\n    test('renders parts with whitespace after them', () => {\n      assertRender(html`<div>${'foo'} </div>`, '<div>foo </div>');\n    });\n\n    test('renders parts that look like attributes', () => {\n      assertRender(html`<div>foo bar=${'baz'}</div>`, '<div>foo bar=baz</div>');\n    });\n\n    test('renders multiple parts per element, preserving whitespace', () => {\n      assertRender(html`<div>${'foo'} ${'bar'}</div>`, '<div>foo bar</div>');\n    });\n\n    test('renders templates with comments', () => {\n      assertRender(\n        html`\n        <div>\n          <!-- this is a comment -->\n          <h1 class=\"${'foo'}\">title</h1>\n          <p>${'foo'}</p>\n        </div>`,\n        `\n        <div>\n          <!-- this is a comment -->\n          <h1 class=\"foo\">title</h1>\n          <p>foo</p>\n        </div>`\n      );\n    });\n\n    test('text after element', () => {\n      assertRender(html`<div></div>${'A'}`, '<div></div>A');\n    });\n\n    test('renders next templates with preceding elements', () => {\n      assertRender(\n        html`<a>${'foo'}</a>${html`<h1>${'bar'}</h1>`}`,\n        '<a>foo</a><h1>bar</h1>'\n      );\n    });\n\n    test('renders expressions with preceding elements', () => {\n      // This is nearly the same test case as above, but was causing a\n      // different stack trace\n      assertRender(html`<a>${'foo'}</a>${'bar'}`, '<a>foo</a>bar');\n    });\n\n    rawTest('text in raw text elements', () => {\n      assertRender(\n        html`<script type=\"foo\">${'A'}</script>`,\n        '<script type=\"foo\">A</script>'\n      );\n      assertRender(html`<style>${'A'}</style>`, '<style>A</style>');\n      assertRender(html`<title>${'A'}</title>`, '<title>A</title>');\n      assertRender(html`<textarea>${'A'}</textarea>`, '<textarea>A</textarea>');\n    });\n\n    rawTest('text in raw text element after <', () => {\n      // It doesn't matter much what marker we use in <script>, <style> and\n      // <textarea> since comments aren't parsed and we have to search the text\n      // anyway.\n      assertRender(\n        html`<script type=\"foo\">i < j ${'A'}</script>`,\n        '<script type=\"foo\">i < j A</script>'\n      );\n    });\n\n    rawTest('text in raw text element after >', () => {\n      assertRender(\n        html`<script type=\"foo\">i > j ${'A'}</script>`,\n        '<script type=\"foo\">i > j A</script>'\n      );\n    });\n\n    rawTest('text in raw text element inside tag-like string', () => {\n      assertRender(\n        html`<script type=\"foo\">\"<div a=${'A'}></div>\";</script>`,\n        '<script type=\"foo\">\"<div a=A></div>\";</script>'\n      );\n    });\n\n    rawTest('renders inside <script>: only node', () => {\n      assertRender(\n        html`<script type=\"foo\">${'foo'}</script>`,\n        '<script type=\"foo\">foo</script>'\n      );\n    });\n\n    rawTest('renders inside <script>: first node', () => {\n      assertRender(\n        html`<script type=\"foo\">${'foo'}A</script>`,\n        '<script type=\"foo\">fooA</script>'\n      );\n    });\n\n    rawTest('renders inside <script>: last node', () => {\n      assertRender(\n        html`<script type=\"foo\">A${'foo'}</script>`,\n        '<script type=\"foo\">Afoo</script>'\n      );\n    });\n\n    rawTest('renders inside <script>: multiple bindings', () => {\n      assertRender(\n        html`<script type=\"foo\">A${'foo'}B${'bar'}C</script>`,\n        '<script type=\"foo\">AfooBbarC</script>'\n      );\n    });\n\n    rawTest('renders inside <script>: attribute-like', () => {\n      assertRender(\n        html`<script type=\"foo\">a=${'foo'}</script>`,\n        '<script type=\"foo\">a=foo</script>'\n      );\n    });\n\n    rawTest('text after script element', () => {\n      assertRender(html`<script></script>${'A'}`, '<script></script>A');\n    });\n\n    rawTest('text after script element with binding', () => {\n      assertRender(\n        html`<script type=\"foo\">${'A'}</script>${'B'}`,\n        '<script type=\"foo\">A</script>B'\n      );\n      assertRender(\n        html`<script type=\"foo\">1${'A'}</script>${'B'}`,\n        '<script type=\"foo\">1A</script>B'\n      );\n      assertRender(\n        html`<script type=\"foo\">${'A'}1</script>${'B'}`,\n        '<script type=\"foo\">A1</script>B'\n      );\n      assertRender(\n        html`<script type=\"foo\">${'A'}${'B'}</script>${'C'}`,\n        '<script type=\"foo\">AB</script>C'\n      );\n      assertRender(\n        html`<script type=\"foo\">${'A'}</script><p>${'B'}</p>`,\n        '<script type=\"foo\">A</script><p>B</p>'\n      );\n    });\n\n    test('text after style element', () => {\n      assertRender(html`<style></style>${'A'}`, '<style></style>A');\n    });\n\n    rawTest('text inside raw text element, after different raw tag', () => {\n      assertRender(\n        html`<script type=\"foo\"><style></style>\"<div a=${'A'}></div>\"</script>`,\n        '<script type=\"foo\"><style></style>\"<div a=A></div>\"</script>'\n      );\n    });\n\n    rawTest('text inside raw text element, after different raw end tag', () => {\n      assertRender(\n        html`<script type=\"foo\"></style>\"<div a=${'A'}></div>\"</script>`,\n        '<script type=\"foo\"></style>\"<div a=A></div>\"</script>'\n      );\n    });\n\n    test('renders inside raw-like element', () => {\n      assertRender(html`<scriptx>${'foo'}</scriptx>`, '<scriptx>foo</scriptx>');\n    });\n\n    test('attribute after raw text element', () => {\n      assertRender(\n        html`<script></script><div a=${'A'}></div>`,\n        '<script></script><div a=\"A\"></div>'\n      );\n    });\n\n    test('unquoted attribute', () => {\n      assertRender(html`<div a=${'A'}></div>`, '<div a=\"A\"></div>');\n      assertRender(html`<div abc=${'A'}></div>`, '<div abc=\"A\"></div>');\n      assertRender(html`<div abc = ${'A'}></div>`, '<div abc=\"A\"></div>');\n      assertRender(html`<input value=${'A'}/>`, '<input value=\"A\">');\n      assertRender(html`<input value=${'A'}${'B'}/>`, '<input value=\"AB\">');\n    });\n\n    test('quoted attribute', () => {\n      assertRender(html`<div a=\"${'A'}\"></div>`, '<div a=\"A\"></div>');\n      assertRender(html`<div abc=\"${'A'}\"></div>`, '<div abc=\"A\"></div>');\n      assertRender(html`<div abc = \"${'A'}\"></div>`, '<div abc=\"A\"></div>');\n      assertRender(html`<div abc=\"${'A'}/>\"></div>`, [\n        '<div abc=\"A/>\"></div>',\n        '<div abc=\"A/&gt;\"></div>',\n      ]);\n      assertRender(html`<input value=\"${'A'}\"/>`, '<input value=\"A\">');\n    });\n\n    test('second quoted attribute', () => {\n      assertRender(\n        html`<div a=\"b\" c=\"${'A'}\"></div>`,\n        '<div a=\"b\" c=\"A\"></div>'\n      );\n    });\n\n    test('two quoted attributes', () => {\n      assertRender(\n        html`<div a=\"${'A'}\" b=\"${'A'}\"></div>`,\n        '<div a=\"A\" b=\"A\"></div>'\n      );\n    });\n\n    test('two unquoted attributes', () => {\n      assertRender(\n        html`<div a=${'A'} b=${'A'}></div>`,\n        '<div a=\"A\" b=\"A\"></div>'\n      );\n    });\n\n    test('quoted attribute multi', () => {\n      assertRender(html`<div a=\"${'A'} ${'A'}\"></div>`, '<div a=\"A A\"></div>');\n    });\n\n    test('quoted attribute with markup', () => {\n      assertRender(html`<div a=\"<table>${'A'}\"></div>`, [\n        '<div a=\"<table>A\"></div>',\n        '<div a=\"&lt;table&gt;A\"></div>',\n      ]);\n    });\n\n    rawTest('text after quoted bound attribute', () => {\n      assertRender(html`<div a=\"${'A'}\">${'A'}</div>`, '<div a=\"A\">A</div>');\n      assertRender(\n        html`<script type=\"foo\" a=\"${'A'}\">${'A'}</script>`,\n        '<script type=\"foo\" a=\"A\">A</script>'\n      );\n    });\n\n    rawTest('text after unquoted bound attribute', () => {\n      assertRender(html`<div a=${'A'}>${'A'}</div>`, '<div a=\"A\">A</div>');\n      assertRender(\n        html`<script type=\"foo\" a=${'A'}>${'A'}</script>`,\n        '<script type=\"foo\" a=\"A\">A</script>'\n      );\n    });\n\n    test('inside start tag', () => {\n      assertRender(html`<div ${`a`}></div>`, '<div></div>');\n    });\n\n    test('inside start tag x2', () => {\n      // We don't support multiple attribute-position bindings yet, so just\n      // ensure this parses ok\n      assertRender(html`<div ${`a`} ${`a`}></div>`, '<div></div>');\n    });\n\n    test('inside start tag after quoted attribute', () => {\n      assertRender(html`<div a=\"b\" ${`c`}></div>`, '<div a=\"b\"></div>');\n      assertRender(\n        html`<script a=\"b\" ${`c`}></script>`,\n        '<script a=\"b\"></script>'\n      );\n    });\n\n    test('inside start tag after unquoted attribute', () => {\n      // prettier-ignore\n      assertRender(html`<div a=b ${`c`}></div>`, '<div a=\"b\"></div>');\n    });\n\n    test('inside start tag before unquoted attribute', () => {\n      // bound attributes always appear after static attributes\n      assertRender(html`<div ${`c`} a=\"b\"></div>`, '<div a=\"b\"></div>');\n    });\n\n    test('inside start tag before quoted attribute', () => {\n      // bound attributes always appear after static attributes\n      assertRender(html`<div ${`c`} a=\"b\"></div>`, '<div a=\"b\"></div>');\n    });\n\n    commentTest('\"dynamic\" tag name', () => {\n      const template = html`<${'A'}></${'A'}>`;\n      if (DEV_MODE) {\n        assert.throws(() => {\n          render(template, container);\n        });\n      } else {\n        render(template, container);\n        assertContent('<></>');\n      }\n    });\n\n    commentTest('malformed \"dynamic\" tag name', () => {\n      // `</ ` starts a comment\n      const template = html`<${'A'}></ ${'A'}>`;\n      if (DEV_MODE) {\n        assert.throws(() => {\n          render(template, container);\n        });\n      } else {\n        render(template, container);\n        assertContent('<><!-- --></>');\n      }\n    });\n\n    test('binding after end tag name', () => {\n      // we don't really care what the syntax position is here\n      assertRender(html`<div></div ${'A'}>`, '<div></div>');\n\n      // TODO (justinfagnani): This will fail. TBD how we want to handle it.\n      // assertRender(html`<div></div ${'A'}>${'B'}`, '<div></div>B');\n    });\n\n    commentTest('comment', () => {\n      assertRender(html`<!--${'A'}-->`, '<!---->');\n    });\n\n    commentTest('comment with attribute-like content', () => {\n      assertRender(html`<!-- a=${'A'}-->`, '<!-- a=-->');\n    });\n\n    commentTest('comment with element-like content', () => {\n      assertRender(html`<!-- <div>${'A'}</div> -->`, '<!-- <div></div> -->');\n    });\n\n    test('text after comment', () => {\n      assertRender(html`<!-- -->${'A'}`, '<!-- -->A');\n    });\n\n    test('renders after existing content', () => {\n      container.appendChild(document.createElement('div'));\n      assertRender(html`<span></span>`, '<div></div><span></span>');\n    });\n\n    test('renders/updates before `renderBefore`, if specified', () => {\n      const renderBefore = container.appendChild(document.createElement('div'));\n      const template = html`<span></span>`;\n      assertRender(template, '<span></span><div></div>', {\n        renderBefore,\n        useDomParts: domPartsSupported,\n      });\n      // Ensure re-render updates rather than re-rendering.\n      const containerChildNodes = Array.from(container.childNodes);\n      assertRender(template, '<span></span><div></div>', {\n        renderBefore,\n        useDomParts: domPartsSupported,\n      });\n      assert.sameMembers(Array.from(container.childNodes), containerChildNodes);\n    });\n\n    test('renders/updates same template before different `renderBefore` nodes', () => {\n      const renderBefore1 = container.appendChild(\n        document.createElement('div')\n      );\n      const renderBefore2 = container.appendChild(\n        document.createElement('div')\n      );\n      const template = html`<span></span>`;\n      assertRender(template, '<span></span><div></div><div></div>', {\n        renderBefore: renderBefore1,\n        useDomParts: domPartsSupported,\n      });\n      const renderedNode1 = container.querySelector('span');\n      assertRender(\n        template,\n        '<span></span><div></div><span></span><div></div>',\n        {\n          renderBefore: renderBefore2,\n          useDomParts: domPartsSupported,\n        }\n      );\n      const renderedNode2 = container.querySelector('span:last-of-type');\n      // Ensure updates are handled as expected.\n      assertRender(\n        template,\n        '<span></span><div></div><span></span><div></div>',\n        {\n          renderBefore: renderBefore1,\n          useDomParts: domPartsSupported,\n        }\n      );\n      assert.equal(container.querySelector('span'), renderedNode1);\n      assert.equal(container.querySelector('span:last-of-type'), renderedNode2);\n      assertRender(\n        template,\n        '<span></span><div></div><span></span><div></div>',\n        {\n          renderBefore: renderBefore2,\n          useDomParts: domPartsSupported,\n        }\n      );\n      assert.equal(container.querySelector('span'), renderedNode1);\n      assert.equal(container.querySelector('span:last-of-type'), renderedNode2);\n    });\n\n    test('renders/updates when specifying `renderBefore` node or not', () => {\n      const template = html`<span></span>`;\n      const renderBefore = container.appendChild(document.createElement('div'));\n      assertRender(template, '<div></div><span></span>');\n      const containerRenderedNode = container.querySelector('span');\n      assertRender(template, '<span></span><div></div><span></span>', {\n        renderBefore,\n        useDomParts: domPartsSupported,\n      });\n      const beforeRenderedNode = container.querySelector('span');\n      // Ensure re-render updates rather than re-rendering.\n      assertRender(template, '<span></span><div></div><span></span>');\n      assert.equal(\n        container.querySelector('span:last-of-type'),\n        containerRenderedNode\n      );\n      assert.equal(container.querySelector('span'), beforeRenderedNode);\n      assertRender(template, '<span></span><div></div><span></span>', {\n        renderBefore,\n        useDomParts: domPartsSupported,\n      });\n      assert.equal(\n        container.querySelector('span:last-of-type'),\n        containerRenderedNode\n      );\n      assert.equal(container.querySelector('span'), beforeRenderedNode);\n    });\n\n    test('back-to-back expressions', () => {\n      const template = (a: unknown, b: unknown) =>\n        html`${html`${a}`}${html`${b}`}`;\n      assertRender(template('a', 'b'), 'ab');\n      assertRender(template(nothing, 'b'), 'b');\n      assertRender(template(nothing, nothing), '');\n      assertRender(template('a', 'b'), 'ab');\n    });\n  });\n\n  suite('text', () => {\n    const assertNoRenderedNodes = () => {\n      const children = Array.from(container.querySelector('div')!.childNodes);\n      assert.isEmpty(\n        children.filter((node) => {\n          if (node.nodeType === Node.COMMENT_NODE) {\n            return false;\n          }\n          if (node.nodeType === Node.TEXT_NODE) {\n            return (node as Text).data !== '';\n          }\n          return true;\n        })\n      );\n    };\n\n    test('renders plain text expression', () => {\n      render(html`test`, container);\n      assertContent('test');\n    });\n\n    test('renders a string', () => {\n      render(html`<div>${'foo'}</div>`, container);\n      assertContent('<div>foo</div>');\n    });\n\n    test('renders a number', () => {\n      render(html`<div>${123}</div>`, container);\n      assertContent('<div>123</div>');\n    });\n\n    [nothing, undefined, null, ''].forEach((value: unknown) => {\n      test(`renders '${\n        value === '' ? 'empty string' : value === nothing ? 'nothing' : value\n      }' as nothing`, () => {\n        const template = (i: any) => html`<div>${i}</div>`;\n        render(template(value), container);\n        assertNoRenderedNodes();\n        render(template('foo'), container);\n        render(template(value), container);\n        assertNoRenderedNodes();\n      });\n    });\n\n    test('renders noChange', () => {\n      const template = (i: any) => html`<div>${i}</div>`;\n      render(template('foo'), container);\n      render(template(noChange), container);\n      assertContent('<div>foo</div>');\n    });\n\n    test.skip('renders a Symbol', () => {\n      render(html`<div>${Symbol('A')}</div>`, container);\n      assert.include(\n        container.querySelector('div')!.textContent!.toLowerCase(),\n        'symbol'\n      );\n    });\n\n    test('does not call a function bound to text', () => {\n      const f = () => {\n        throw new Error();\n      };\n      render(html`${f}`, container);\n    });\n\n    test('renders nested templates', () => {\n      const partial = html`<h1>${'foo'}</h1>`;\n      render(html`${partial}${'bar'}`, container);\n      assertContent('<h1>foo</h1>bar');\n    });\n\n    test('renders a template nested multiple times', () => {\n      const partial = html`<h1>${'foo'}</h1>`;\n      render(html`${partial}${'bar'}${partial}${'baz'}qux`, container);\n      assertContent('<h1>foo</h1>bar<h1>foo</h1>bazqux');\n    });\n\n    test('renders value that switches between template and undefined', () => {\n      const go = (v: unknown) => render(html`${v}`, container);\n      go(undefined);\n      assertContent('');\n      go(html`<h1>Hello</h1>`);\n      assertContent('<h1>Hello</h1>');\n    });\n\n    test('renders an element', () => {\n      const child = document.createElement('p');\n      render(html`<div>${child}</div>`, container);\n      assertContent('<div><p></p></div>');\n    });\n\n    test('renders forms as elements', () => {\n      // Forms are both a Node and iterable, so make sure they are rendered as\n      // a Node.\n\n      const form = document.createElement('form');\n      const inputOne = document.createElement('input');\n      inputOne.name = 'one';\n      const inputTwo = document.createElement('input');\n      inputTwo.name = 'two';\n\n      form.appendChild(inputOne);\n      form.appendChild(inputTwo);\n\n      render(html`${form}`, container);\n\n      assertContent('<form><input name=\"one\"><input name=\"two\"></form>');\n    });\n  });\n\n  suite('arrays & iterables', () => {\n    test('renders arrays', () => {\n      render(html`<div>${[1, 2, 3]}</div>`, container);\n      assertContent('<div>123</div>');\n    });\n\n    test('renders arrays of nested templates', () => {\n      render(html`<div>${[1, 2, 3].map((i) => html`${i}`)}</div>`, container);\n      assertContent('<div>123</div>');\n    });\n\n    test('renders an array of elements', () => {\n      const children = [\n        document.createElement('p'),\n        document.createElement('a'),\n        document.createElement('span'),\n      ];\n      render(html`<div>${children}</div>`, container);\n      assertContent('<div><p></p><a></a><span></span></div>');\n    });\n\n    test('updates when called multiple times with arrays', () => {\n      const ul = (list: string[]) => {\n        const items = list.map((item) => html`<li>${item}</li>`);\n        return html`<ul>${items}</ul>`;\n      };\n      render(ul(['a', 'b', 'c']), container);\n      assertContent('<ul><li>a</li><li>b</li><li>c</li></ul>');\n      render(ul(['x', 'y']), container);\n      assertContent('<ul><li>x</li><li>y</li></ul>');\n    });\n\n    test('updates arrays', () => {\n      let items = [1, 2, 3];\n      const t = () => html`<div>${items}</div>`;\n      render(t(), container);\n      assertContent('<div>123</div>');\n\n      items = [3, 2, 1];\n      render(t(), container);\n      assertContent('<div>321</div>');\n    });\n\n    test('updates arrays that shrink then grow', () => {\n      let items: number[];\n      const t = () => html`<div>${items}</div>`;\n\n      items = [1, 2, 3];\n      render(t(), container);\n      assertContent('<div>123</div>');\n\n      items = [4];\n      render(t(), container);\n      assertContent('<div>4</div>');\n\n      items = [5, 6, 7];\n      render(t(), container);\n      assertContent('<div>567</div>');\n    });\n\n    test('updates an array of elements', () => {\n      let children: any = [\n        document.createElement('p'),\n        document.createElement('a'),\n        document.createElement('span'),\n      ];\n      const t = () => html`<div>${children}</div>`;\n      render(t(), container);\n      assertContent('<div><p></p><a></a><span></span></div>');\n\n      children = null;\n      render(t(), container);\n      assertContent('<div></div>');\n\n      children = document.createTextNode('foo');\n      render(t(), container);\n      assertContent('<div>foo</div>');\n    });\n  });\n\n  suite('svg', () => {\n    test('renders SVG', () => {\n      const container = document.createElement('svg');\n      const t = svg`<line y1=\"1\" y2=\"1\"/>`;\n      render(t, container);\n      const line = container.firstElementChild!;\n      assert.equal(line.tagName, 'line');\n      assert.equal(line.namespaceURI, 'http://www.w3.org/2000/svg');\n    });\n\n    const staticAssertExtends = <T, U extends T>(_?: [T, U]) => {};\n\n    test('`SVGTemplateResult` is a subtype of `TemplateResult`', () => {\n      staticAssertExtends<TemplateResult, SVGTemplateResult>();\n    });\n\n    test('`svg` returns an `SVGTemplateResult`', () => {\n      staticAssertExtends<SVGTemplateResult, ReturnType<typeof svg>>();\n    });\n  });\n\n  suite('attributes', () => {\n    test('renders to a quoted attribute', () => {\n      render(html`<div foo=\"${'bar'}\"></div>`, container);\n      assertContent('<div foo=\"bar\"></div>');\n    });\n\n    test('renders to an unquoted attribute', () => {\n      assertRender(html`<div foo=${'bar'}></div>`, '<div foo=\"bar\"></div>');\n      assertRender(\n        html`<div foo=${'bar'}/baz></div>`,\n        '<div foo=\"bar/baz\"></div>'\n      );\n    });\n\n    test('renders to an unquoted attribute after an unbound unquoted attribute', () => {\n      assertRender(\n        html`<div foo=bar baz=${'qux'}></div>`,\n        '<div foo=\"bar\" baz=\"qux\"></div>'\n      );\n      assertRender(\n        html`<div foo=a/b baz=${'qux'}></div>`,\n        '<div foo=\"a/b\" baz=\"qux\"></div>'\n      );\n    });\n\n    test('renders interpolation to a quoted attribute', () => {\n      render(html`<div foo=\"A${'B'}C\"></div>`, container);\n      assertContent('<div foo=\"ABC\"></div>');\n      render(html`<div foo=\"${'A'}B${'C'}\"></div>`, container);\n      assertContent('<div foo=\"ABC\"></div>');\n    });\n\n    test('renders interpolation to an unquoted attribute', () => {\n      render(html`<div foo=A${'B'}C></div>`, container);\n      assertContent('<div foo=\"ABC\"></div>');\n      render(html`<div foo=${'A'}B${'C'}></div>`, container);\n      assertContent('<div foo=\"ABC\"></div>');\n    });\n\n    test('renders interpolation to an unquoted attribute with nbsp character', () => {\n      assertRender(\n        html`<div a=${'A'}\\u00a0${'B'}></div>`,\n        '<div a=\"A&nbsp;B\"></div>'\n      );\n    });\n\n    test('renders interpolation to a quoted attribute with nbsp character', () => {\n      assertRender(\n        html`<div a=\"${'A'}\\u00a0${'B'}\"></div>`,\n        '<div a=\"A&nbsp;B\"></div>'\n      );\n    });\n\n    test('renders non-latin attribute name and interpolated unquoted non-latin values', () => {\n      assertRender(\n        html`<div ふ=ふ${'ふ'}ふ フ=フ${'フ'}フ></div>`,\n        '<div ふ=\"ふふふ\" フ=\"フフフ\"></div>'\n      );\n    });\n\n    test('renders multiple bindings in an attribute', () => {\n      render(html`<div foo=\"a${'b'}c${'d'}e\"></div>`, container);\n      assertContent('<div foo=\"abcde\"></div>');\n    });\n\n    test('renders two attributes on one element', () => {\n      const result = html`<div a=\"${1}\" b=\"${2}\"></div>`;\n      render(result, container);\n      assertContent('<div a=\"1\" b=\"2\"></div>');\n    });\n\n    test('renders multiple bindings in two attributes', () => {\n      render(\n        html`<div foo=\"a${'b'}c${'d'}e\" bar=\"a${'b'}c${'d'}e\"></div>`,\n        container\n      );\n      assertContent('<div foo=\"abcde\" bar=\"abcde\"></div>');\n    });\n\n    test.skip('renders a Symbol to an attribute', () => {\n      render(html`<div foo=${Symbol('A')}></div>`, container);\n      assert.include(container.querySelector('div')!.getAttribute('foo'), '');\n    });\n\n    test.skip('renders a Symbol in an array to an attribute', () => {\n      render(html`<div foo=${[Symbol('A')] as any}></div>`, container);\n      assert.include(container.querySelector('div')!.getAttribute('foo')!, '');\n    });\n\n    test('renders a binding in a style attribute', () => {\n      const t = html`<div style=\"color: ${'red'}\"></div>`;\n      render(t, container);\n      if (isIe) {\n        assertContent('<div style=\"color: red;\"></div>');\n      } else {\n        assertContent('<div style=\"color: red\"></div>');\n      }\n    });\n\n    test('renders multiple bindings in a style attribute', () => {\n      const t = html`<div style=\"${'color'}: ${'red'}\"></div>`;\n      render(t, container);\n      if (isIe) {\n        assertContent('<div style=\"color: red;\"></div>');\n      } else {\n        assertContent('<div style=\"color: red\"></div>');\n      }\n    });\n\n    test('renders a binding in a class attribute', () => {\n      render(html`<div class=\"${'red'}\"></div>`, container);\n      assertContent('<div class=\"red\"></div>');\n    });\n\n    test('renders a binding in an input value attribute', () => {\n      render(html`<input value=\"${'the-value'}\" />`, container);\n      assertContent('<input value=\"the-value\">');\n      assert.equal(container.querySelector('input')!.value, 'the-value');\n    });\n\n    test('renders a case-sensitive attribute', () => {\n      const size = 100;\n      render(html`<svg viewBox=\"0 0 ${size} ${size}\"></svg>`, container);\n      assert.include(\n        stripExpressionComments(container.innerHTML),\n        'viewBox=\"0 0 100 100\"'\n      );\n\n      // Make sure non-alpha valid attribute name characters are handled\n      render(html`<svg view_Box=\"0 0 ${size} ${size}\"></svg>`, container);\n      assert.include(\n        stripExpressionComments(container.innerHTML),\n        'view_Box=\"0 0 100 100\"'\n      );\n    });\n\n    test('renders to an attribute expression after an attribute literal', () => {\n      assertRender(\n        html`<div a=\"b\" foo=\"${'bar'}\"></div>`,\n        // IE and Edge can switch attribute order!\n        ['<div a=\"b\" foo=\"bar\"></div>', '<div foo=\"bar\" a=\"b\"></div>']\n      );\n    });\n\n    test('renders to an attribute expression before an attribute literal', () => {\n      assertRender(html`<div foo=\"${'bar'}\" a=\"b\"></div>`, [\n        '<div a=\"b\" foo=\"bar\"></div>',\n        '<div foo=\"bar\" a=\"b\"></div>',\n      ]);\n    });\n\n    // Regression test for exception in template parsing caused by attributes\n    // reordering when a attribute binding precedes an attribute literal.\n    test('renders attribute binding after attribute binding that moved', () => {\n      render(\n        html`<a href=\"${'foo'}\" class=\"bar\"><div id=${'a'}></div></a>`,\n        container\n      );\n      assertContent(`<a class=\"bar\" href=\"foo\"><div id=\"a\"></div></a>`);\n    });\n\n    test('renders a bound attribute without quotes', () => {\n      render(html`<div foo=${'bar'}></div>`, container);\n      assertContent('<div foo=\"bar\"></div>');\n    });\n\n    test('renders multiple bound attributes', () => {\n      assertRender(\n        html`<div foo=\"${'Foo'}\" bar=\"${'Bar'}\" baz=${'Baz'}></div>`,\n        [\n          '<div foo=\"Foo\" bar=\"Bar\" baz=\"Baz\"></div>',\n          '<div foo=\"Foo\" baz=\"Baz\" bar=\"Bar\"></div>',\n          '<div bar=\"Bar\" foo=\"Foo\" baz=\"Baz\"></div>',\n        ]\n      );\n    });\n\n    test('renders multiple bound attributes without quotes', () => {\n      assertRender(html`<div foo=${'Foo'} bar=${'Bar'} baz=${'Baz'}></div>`, [\n        '<div foo=\"Foo\" bar=\"Bar\" baz=\"Baz\"></div>',\n        '<div foo=\"Foo\" baz=\"Baz\" bar=\"Bar\"></div>',\n        '<div bar=\"Bar\" foo=\"Foo\" baz=\"Baz\"></div>',\n      ]);\n    });\n\n    test('renders multi-expression attribute without quotes', () => {\n      render(html`<div foo=\"${'Foo'}${'Bar'}\"></div>`, container);\n      assertContent('<div foo=\"FooBar\"></div>');\n    });\n\n    test('renders to attributes with attribute-like values', () => {\n      render(html`<div foo=\"bar=${'foo'}\"></div>`, container);\n      assertContent('<div foo=\"bar=foo\"></div>');\n    });\n\n    test('does not call a function bound to an attribute', () => {\n      const f = () => {\n        throw new Error();\n      };\n      render(html`<div foo=${f as any}></div>`, container);\n      const div = container.querySelector('div')!;\n      assert.isTrue(div.hasAttribute('foo'));\n    });\n\n    test('renders an array to an attribute', () => {\n      render(html`<div foo=${['1', '2', '3'] as any}></div>`, container);\n      assertContent('<div foo=\"1,2,3\"></div>');\n    });\n\n    test('renders to an attribute before a node', () => {\n      render(html`<div foo=\"${'bar'}\">${'baz'}</div>`, container);\n      assertContent('<div foo=\"bar\">baz</div>');\n    });\n\n    test('renders to an attribute after a node', () => {\n      render(html`<div>${'baz'}</div><div foo=\"${'bar'}\"></div>`, container);\n      assertContent('<div>baz</div><div foo=\"bar\"></div>');\n    });\n\n    test('renders undefined in interpolated attributes', () => {\n      render(html`<div attribute=\"it's ${undefined}\"></div>`, container);\n      assertContent('<div attribute=\"it\\'s \"></div>');\n    });\n\n    test('renders undefined in attributes', () => {\n      render(html`<div attribute=\"${undefined as any}\"></div>`, container);\n      assertContent('<div attribute=\"\"></div>');\n    });\n\n    test('renders null in attributes', () => {\n      render(html`<div attribute=\"${null as any}\"></div>`, container);\n      assertContent('<div attribute=\"\"></div>');\n    });\n\n    test('renders empty string in attributes', () => {\n      render(html`<div attribute=\"${''}\"></div>`, container);\n      assertContent('<div attribute=\"\"></div>');\n    });\n\n    test('renders empty string in interpolated attributes', () => {\n      render(html`<div attribute=\"foo${''}\"></div>`, container);\n      assertContent('<div attribute=\"foo\"></div>');\n    });\n\n    test('initial render of noChange in fully-controlled attribute', () => {\n      render(html`<div attribute=\"${noChange as any}\"></div>`, container);\n      assertContent('<div></div>');\n    });\n\n    test('renders noChange in attributes, preserves outside attribute value', () => {\n      const go = (v: any) =>\n        render(html`<div attribute=\"${v}\"></div>`, container);\n      go(noChange);\n      assertContent('<div></div>');\n      const div = container.querySelector('div');\n      div?.setAttribute('attribute', 'A');\n      go(noChange);\n      assertContent('<div attribute=\"A\"></div>');\n    });\n\n    test('nothing sentinel removes an attribute', () => {\n      const go = (v: any) => html`<div a=${v}></div>`;\n      render(go(nothing), container);\n      assertContent('<div></div>');\n\n      render(go('a'), container);\n      assertContent('<div a=\"a\"></div>');\n\n      render(go(nothing), container);\n      assertContent('<div></div>');\n    });\n\n    test('interpolated nothing sentinel removes an attribute', () => {\n      const go = (v: any) => html`<div a=\"A${v}\"></div>`;\n      render(go('a'), container);\n      assertContent('<div a=\"Aa\"></div>');\n\n      render(go(nothing), container);\n      assertContent('<div></div>');\n    });\n\n    test('noChange works', () => {\n      const go = (v: any) => render(html`<div foo=${v}></div>`, container);\n      go('A');\n      assertContent('<div foo=\"A\"></div>', 'A');\n      const observer = new MutationObserver(() => {});\n      observer.observe(container, {attributes: true, subtree: true});\n\n      go(noChange);\n      assertContent('<div foo=\"A\"></div>', 'B');\n      assert.isEmpty(observer.takeRecords());\n    });\n\n    test('noChange renders as empty string when used in interpolated attributes', () => {\n      const go = (a: any, b: any) =>\n        render(html`<div foo=\"${a}:${b}\"></div>`, container);\n\n      go('A', noChange);\n      assertContent('<div foo=\"A:\"></div>', 'A');\n\n      go('A', 'B');\n      assertContent('<div foo=\"A:B\"></div>', 'A');\n      go(noChange, 'C');\n      assertContent('<div foo=\"A:C\"></div>', 'B');\n    });\n  });\n\n  suite('boolean attributes', () => {\n    test('adds attributes for true values', () => {\n      render(html`<div ?foo=${true}></div>`, container);\n      assertContent('<div foo=\"\"></div>');\n    });\n\n    test('removes attributes for false values', () => {\n      render(html`<div ?foo=${false}></div>`, container);\n      assertContent('<div></div>');\n    });\n\n    test('removes attributes for nothing values', () => {\n      const go = (v: any) => render(html`<div ?foo=${v}></div>`, container);\n\n      go(nothing);\n      assertContent('<div></div>');\n\n      go(true);\n      assertContent('<div foo=\"\"></div>');\n\n      go(nothing);\n      assertContent('<div></div>');\n    });\n\n    test('noChange works', () => {\n      const go = (v: any) => render(html`<div ?foo=${v}></div>`, container);\n      go(true);\n      assertContent('<div foo=\"\"></div>');\n      const observer = new MutationObserver(() => {});\n      observer.observe(container, {attributes: true, subtree: true});\n      go(noChange);\n      assertContent('<div foo=\"\"></div>');\n      assert.isEmpty(observer.takeRecords());\n    });\n\n    test('binding undefined removes the attribute', () => {\n      const go = (v: unknown) => render(html`<div ?foo=${v}></div>`, container);\n      go(undefined);\n      assertContent('<div></div>');\n      // it doesn't toggle the attribute\n      go(undefined);\n      assertContent('<div></div>');\n      // it does remove it\n      go(true);\n      assertContent('<div foo=\"\"></div>');\n      go(undefined);\n      assertContent('<div></div>');\n    });\n  });\n\n  suite('properties', () => {\n    test('sets properties', () => {\n      render(html`<div .foo=${123} .Bar=${456}></div>`, container);\n      const div = container.querySelector('div')!;\n      assert.strictEqual((div as any).foo, 123);\n      assert.strictEqual((div as any).Bar, 456);\n    });\n\n    test('nothing becomes undefined', () => {\n      const go = (v: any) => render(html`<div .foo=${v}></div>`, container);\n\n      go(1);\n      const div = container.querySelector('div')!;\n      assert.strictEqual((div as any).foo, 1);\n\n      go(nothing);\n      assert.strictEqual((div as any).foo, undefined);\n    });\n\n    test('null sets null', () => {\n      const go = (v: any) => render(html`<div .foo=${v}></div>`, container);\n\n      go(null);\n      const div = container.querySelector('div')!;\n      assert.strictEqual((div as any).foo, null);\n    });\n\n    test('null in multiple part sets empty string', () => {\n      const go = (v1: any, v2: any) =>\n        render(html`<div .foo=\"${v1}${v2}\"></div>`, container);\n\n      go('hi', null);\n      const div = container.querySelector('div')!;\n      assert.strictEqual((div as any).foo, 'hi');\n    });\n\n    test('undefined sets undefined', () => {\n      const go = (v: any) => render(html`<div .foo=${v}></div>`, container);\n\n      go(undefined);\n      const div = container.querySelector('div')!;\n      assert.strictEqual((div as any).foo, undefined);\n    });\n\n    test('undefined in multiple part sets empty string', () => {\n      const go = (v1: any, v2: any) =>\n        render(html`<div .foo=\"${v1}${v2}\"></div>`, container);\n\n      go('hi', undefined);\n      const div = container.querySelector('div')!;\n      assert.strictEqual((div as any).foo, 'hi');\n    });\n\n    test('noChange works', () => {\n      const go = (v: any) => render(html`<div .foo=${v}></div>`, container);\n      go(1);\n      const div = container.querySelector('div')!;\n      assert.strictEqual((div as any).foo, 1);\n\n      go(noChange);\n      assert.strictEqual((div as any).foo, 1);\n    });\n  });\n\n  suite('events', () => {\n    setup(() => {\n      document.body.appendChild(container);\n    });\n\n    teardown(() => {\n      document.body.removeChild(container);\n    });\n\n    test('adds event listener functions, calls with right this value', () => {\n      let thisValue;\n      let event: Event | undefined = undefined;\n      const listener = function (this: any, e: any) {\n        event = e;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        thisValue = this;\n      };\n      const host = {} as EventTarget;\n      render(html`<div @click=${listener}></div>`, container, {\n        host,\n        useDomParts: domPartsSupported,\n      });\n      const div = container.querySelector('div')!;\n      div.click();\n      if (event === undefined) {\n        throw new Error(`Event listener never fired!`);\n      }\n      assert.equal(thisValue, host);\n\n      // MouseEvent is not a function in IE, so the event cannot be an instance\n      // of it\n      if (typeof MouseEvent === 'function') {\n        assert.instanceOf(event, MouseEvent);\n      } else {\n        assert.isDefined((event as MouseEvent).initMouseEvent);\n      }\n    });\n\n    test('adds event listener objects, calls with right this value', () => {\n      let thisValue;\n      const listener = {\n        handleEvent(_e: Event) {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          thisValue = this;\n        },\n      };\n      const host = {} as EventTarget;\n      render(html`<div @click=${listener}></div>`, container, {\n        host,\n        useDomParts: domPartsSupported,\n      });\n      const div = container.querySelector('div')!;\n      div.click();\n      assert.equal(thisValue, listener);\n    });\n\n    test('only adds event listener once', () => {\n      let count = 0;\n      const listener = () => {\n        count++;\n      };\n      render(html`<div @click=${listener}></div>`, container);\n      render(html`<div @click=${listener}></div>`, container);\n\n      const div = container.querySelector('div')!;\n      div.click();\n      assert.equal(count, 1);\n    });\n\n    test('adds event listeners on self-closing tags', () => {\n      let count = 0;\n      const listener = () => {\n        count++;\n      };\n      render(html`<div @click=${listener}/></div>`, container);\n\n      const div = container.querySelector('div')!;\n      div.click();\n      assert.equal(count, 1);\n    });\n\n    test('allows updating event listener', () => {\n      let count1 = 0;\n      const listener1 = () => {\n        count1++;\n      };\n      let count2 = 0;\n      const listener2 = () => {\n        count2++;\n      };\n      const t = (listener: () => void) => html`<div @click=${listener}></div>`;\n      render(t(listener1), container);\n      render(t(listener2), container);\n\n      const div = container.querySelector('div')!;\n      div.click();\n      assert.equal(count1, 0);\n      assert.equal(count2, 1);\n    });\n\n    test('allows updating event listener without extra calls to remove/addEventListener', () => {\n      let listener: Function | null;\n      const t = () => html`<div @click=${listener}></div>`;\n      render(t(), container);\n      const div = container.querySelector('div')!;\n\n      let addCount = 0;\n      let removeCount = 0;\n      div.addEventListener = () => addCount++;\n      div.removeEventListener = () => removeCount++;\n\n      listener = () => {};\n      render(t(), container);\n      assert.equal(addCount, 1);\n      assert.equal(removeCount, 0);\n\n      listener = () => {};\n      render(t(), container);\n      assert.equal(addCount, 1);\n      assert.equal(removeCount, 0);\n\n      listener = null;\n      render(t(), container);\n      assert.equal(addCount, 1);\n      assert.equal(removeCount, 1);\n\n      listener = () => {};\n      render(t(), container);\n      assert.equal(addCount, 2);\n      assert.equal(removeCount, 1);\n\n      listener = () => {};\n      render(t(), container);\n      assert.equal(addCount, 2);\n      assert.equal(removeCount, 1);\n    });\n\n    test('removes event listeners', () => {\n      let target;\n      let listener: any = (e: any) => (target = e.target);\n      const t = () => html`<div @click=${listener}></div>`;\n      render(t(), container);\n      const div = container.querySelector('div')!;\n      div.click();\n      assert.equal(target, div);\n\n      listener = null;\n      target = undefined;\n      render(t(), container);\n      div.click();\n      assert.equal(target, undefined);\n    });\n\n    test('allows capturing events', () => {\n      let event!: Event;\n      let eventPhase!: number;\n      const listener = {\n        handleEvent(e: Event) {\n          event = e;\n          // read here because it changes\n          eventPhase = event.eventPhase;\n        },\n        capture: true,\n      };\n      render(\n        html`\n          <div id=\"outer\" @test=${listener}>\n            <div id=\"inner\"><div></div></div>\n          </div>\n        `,\n        container\n      );\n      const inner = container.querySelector('#inner')!;\n      inner.dispatchEvent(new Event('test'));\n      assert.isOk(event);\n      assert.equal(eventPhase, Event.CAPTURING_PHASE);\n    });\n\n    test('event listeners can see events fired by dynamic children', () => {\n      // This tests that node directives are called in the commit phase, not\n      // the setValue phase\n      class TestElement1 extends HTMLElement {\n        connectedCallback() {\n          this.dispatchEvent(\n            new CustomEvent('test-event', {\n              bubbles: true,\n            })\n          );\n        }\n      }\n      customElements.define('test-element-1', TestElement1);\n\n      let event: Event | undefined = undefined;\n      const listener = (e: Event) => {\n        event = e;\n      };\n      document.body.appendChild(container);\n      render(\n        html`<div @test-event=${listener}>\n          ${html`<test-element-1></test-element-1>`}\n        </div>`,\n        container\n      );\n      assert.isOk(event);\n    });\n  });\n\n  suite('updates', () => {\n    test('dirty checks simple values', () => {\n      const foo = 'aaa';\n\n      const t = () => html`<div>${foo}</div>`;\n\n      render(t(), container);\n      assertContent('<div>aaa</div>');\n      const div = container.querySelector('div')!;\n      assert.equal(div.textContent, 'aaa');\n\n      // Set textContent manually (without disturbing the part marker node).\n      // Since lit-html doesn't dirty check against actual DOM, but again\n      // previous part values, this modification should persist through the\n      // next render with the same value.\n      const litWrittenNode = [...div.childNodes].find((n) => {\n        return n.nodeType === Node.TEXT_NODE && (n as Text).data === 'aaa';\n      })!;\n      litWrittenNode.textContent = 'bbb';\n      assert.equal(div.textContent, 'bbb');\n      assertContent('<div>bbb</div>');\n\n      // Re-render with the same content, should be a no-op\n      render(t(), container);\n      assertContent('<div>bbb</div>');\n      const text2 = container.querySelector('div')!;\n\n      // The next node should be the same too\n      assert.strictEqual(div, text2);\n    });\n\n    test('dirty checks node values', async () => {\n      const node = document.createElement('div');\n      const t = () => html`${node}`;\n\n      const observer = new MutationObserver(() => {});\n      observer.observe(container, {childList: true, subtree: true});\n\n      assertContent('');\n      render(t(), container);\n      assertContent('<div></div>');\n\n      const elementNodes: Node[] = [];\n      let mutationRecords: MutationRecord[] = observer.takeRecords();\n      for (const record of mutationRecords) {\n        elementNodes.push(\n          ...Array.from(record.addedNodes).filter(\n            (n) => n.nodeType === Node.ELEMENT_NODE\n          )\n        );\n      }\n      assert.equal(elementNodes.length, 1);\n\n      mutationRecords = [];\n      render(t(), container);\n      assertContent('<div></div>');\n      mutationRecords = observer.takeRecords();\n      assert.equal(mutationRecords.length, 0);\n    });\n\n    test('renders to and updates a container', () => {\n      let foo = 'aaa';\n\n      const t = () => html`<div>${foo}</div>`;\n\n      render(t(), container);\n      assertContent('<div>aaa</div>');\n      const div = container.querySelector('div')!;\n      assert.equal(div.tagName, 'DIV');\n\n      foo = 'bbb';\n      render(t(), container);\n      assertContent('<div>bbb</div>');\n      const div2 = container.querySelector('div')!;\n      // check that only the part changed\n      assert.equal(div, div2);\n    });\n\n    test('renders to and updates sibling parts', () => {\n      let foo = 'foo';\n      const bar = 'bar';\n\n      const t = () => html`<div>${foo}${bar}</div>`;\n\n      render(t(), container);\n      assertContent('<div>foobar</div>');\n\n      foo = 'bbb';\n      render(t(), container);\n      assertContent('<div>bbbbar</div>');\n    });\n\n    test('renders and updates attributes', () => {\n      let foo = 'foo';\n      const bar = 'bar';\n\n      const t = () => html`<div a=\"${foo}:${bar}\"></div>`;\n\n      render(t(), container);\n      assertContent('<div a=\"foo:bar\"></div>');\n\n      foo = 'bbb';\n      render(t(), container);\n      assertContent('<div a=\"bbb:bar\"></div>');\n    });\n\n    test('updates nested templates', () => {\n      let foo = 'foo';\n      const bar = 'bar';\n      const baz = 'baz';\n\n      const t = (x: boolean) => {\n        let partial;\n        if (x) {\n          partial = html`<h1>${foo}</h1>`;\n        } else {\n          partial = html`<h2>${bar}</h2>`;\n        }\n\n        return html`${partial}${baz}`;\n      };\n\n      render(t(true), container);\n      assertContent('<h1>foo</h1>baz');\n\n      foo = 'bbb';\n      render(t(true), container);\n      assertContent('<h1>bbb</h1>baz');\n\n      render(t(false), container);\n      assertContent('<h2>bar</h2>baz');\n    });\n\n    test('updates an element', () => {\n      let child: any = document.createElement('p');\n      const t = () => html`<div>${child}<div></div></div>`;\n      render(t(), container);\n      assertContent('<div><p></p><div></div></div>');\n\n      child = undefined;\n      render(t(), container);\n      assertContent('<div><div></div></div>');\n\n      child = document.createTextNode('foo');\n      render(t(), container);\n      assertContent('<div>foo<div></div></div>');\n    });\n\n    test(\n      'overwrites an existing TemplateInstance if one exists and does ' +\n        'not have a matching Template',\n      () => {\n        render(html`<div>foo</div>`, container);\n\n        assert.equal(container.children.length, 1);\n        const fooDiv = container.children[0];\n        assert.equal(fooDiv.textContent, 'foo');\n\n        render(html`<div>bar</div>`, container);\n\n        assert.equal(container.children.length, 1);\n        const barDiv = container.children[0];\n        assert.equal(barDiv.textContent, 'bar');\n\n        assert.notEqual(fooDiv, barDiv);\n      }\n    );\n  });\n\n  compiledSuite('compiled', () => {\n    const branding_tag = (s: TemplateStringsArray) => s;\n\n    test('only text', () => {\n      // A compiled template for html`${'A'}`\n      const _$lit_template_1: CompiledTemplate = {\n        h: branding_tag`<!---->`,\n        parts: [{type: 2, index: 0}],\n      };\n      assertRender(\n        {\n          // This property needs to remain unminified.\n          ['_$litType$']: _$lit_template_1,\n          values: ['A'],\n        },\n        'A'\n      );\n    });\n\n    test('text expression', () => {\n      // A compiled template for html`<div>${'A'}</div>`\n      const _$lit_template_1: CompiledTemplate = {\n        h: branding_tag`<div><!----></div>`,\n        parts: [{type: 2, index: 1}],\n      };\n      const result = {\n        // This property needs to remain unminified.\n        ['_$litType$']: _$lit_template_1,\n        values: ['A'],\n      };\n      assertRender(result, '<div>A</div>');\n    });\n\n    test('attribute expression', () => {\n      // A compiled template for html`<div foo=${'A'}></div>`\n      const _$lit_template_1: CompiledTemplate = {\n        h: branding_tag`<div></div>`,\n        parts: [\n          {\n            type: 1,\n            index: 0,\n            name: 'foo',\n            strings: ['', ''],\n            ctor: AttributePart,\n          },\n        ],\n      };\n      const result = {\n        // This property needs to remain unminified.\n        ['_$litType$']: _$lit_template_1,\n        values: ['A'],\n      };\n      assertRender(result, '<div foo=\"A\"></div>');\n    });\n\n    test('element expression', () => {\n      const r = createRef();\n      // A compiled template for html`<div ${ref(r)}></div>`\n      const _$lit_template_1: CompiledTemplate = {\n        h: branding_tag`<div></div>`,\n        parts: [{type: 6, index: 0}],\n      };\n      const result = {\n        // This property needs to remain unminified.\n        ['_$litType$']: _$lit_template_1,\n        values: [ref(r)],\n      };\n      assertRender(result, '<div></div>');\n      const div = container.firstElementChild;\n      assert.isDefined(div);\n      assert.strictEqual(r.value, div);\n    });\n\n    test(`throw if unbranded`, () => {\n      const _$lit_template_1: CompiledTemplate = {\n        h: ['<div><!----></div>'] as unknown as TemplateStringsArray,\n        parts: [{type: 2, index: 1}],\n      };\n      const result = {\n        // This property needs to remain unminified.\n        ['_$litType$']: _$lit_template_1,\n        values: ['A'],\n      };\n      assert.throws(() => render(result, container));\n    });\n  });\n\n  suite('directives', () => {\n    // A stateful directive\n    class CountDirective extends Directive {\n      count = 0;\n      render(id: string, log?: string[]) {\n        const v = `${id}:${++this.count}`;\n        if (log !== undefined) {\n          log.push(v);\n        }\n        return v;\n      }\n    }\n    const count = directive(CountDirective);\n\n    test('renders directives on ChildParts', () => {\n      class TestDirective extends Directive {\n        render(v: string) {\n          return html`TEST:${v}`;\n        }\n      }\n      const testDirective = directive(TestDirective);\n\n      render(html`<div>${testDirective('A')}</div>`, container);\n      assertContent('<div>TEST:A</div>');\n    });\n\n    test('PartInfo includes metadata for directive in ChildPart', () => {\n      let partInfo: PartInfo;\n      const testDirective = directive(\n        class extends Directive {\n          constructor(info: PartInfo) {\n            super(info);\n            partInfo = info;\n          }\n          render(v: unknown) {\n            return v;\n          }\n        }\n      );\n      assertRender(\n        html`<div>${testDirective('test')}</div>`,\n        '<div>test</div>'\n      );\n      assert.equal(partInfo!.type, PartType.CHILD);\n    });\n\n    suite('ChildPart invariants for parentNode, startNode, endNode', () => {\n      // Let's us get a reference to a directive instance\n      let currentDirective: CheckNodePropertiesBehavior;\n\n      class CheckNodePropertiesBehavior extends Directive {\n        part?: ChildPart;\n\n        render(_parentId?: string, _done?: (err?: unknown) => void) {\n          return nothing;\n        }\n\n        override update(\n          part: ChildPart,\n          [parentId, done]: DirectiveParameters<this>\n        ) {\n          this.part = part;\n          // eslint-disable-next-line\n          currentDirective = this;\n          try {\n            const {parentNode, startNode, endNode} = part;\n\n            if (endNode !== null) {\n              assert.notEqual(startNode, null);\n            }\n\n            if (startNode === null) {\n              // The part covers all children in `parentNode`.\n              assert.equal(parentNode.childNodes.length, 0);\n              assert.equal(endNode, null);\n            } else if (endNode === null) {\n              // The part covers all siblings following `startNode`.\n              assert.equal(startNode.nextSibling, null);\n            } else {\n              // The part covers all siblings between `startNode` and `endNode`.\n              assert.equal<Node | null>(startNode.nextSibling, endNode);\n            }\n\n            if (parentId !== undefined) {\n              assert.equal((parentNode as HTMLElement).id, parentId);\n            }\n            done?.();\n          } catch (e) {\n            if (done === undefined) {\n              throw e;\n            } else {\n              done(e);\n            }\n          }\n\n          return nothing;\n        }\n      }\n      const checkPart = directive(CheckNodePropertiesBehavior);\n\n      test('when the directive is the only child', () => {\n        const makeTemplate = (content: unknown) => html`<div>${content}</div>`;\n\n        // Render twice so that `update` is called.\n        render(makeTemplate(checkPart()), container);\n        render(makeTemplate(checkPart()), container);\n      });\n\n      test('when the directive is the last child', () => {\n        const makeTemplate = (content: unknown) =>\n          html`<div>Earlier sibling. ${content}</div>`;\n\n        // Render twice so that `update` is called.\n        render(makeTemplate(checkPart()), container);\n        render(makeTemplate(checkPart()), container);\n      });\n\n      test('when the directive is not the last child', () => {\n        const makeTemplate = (content: unknown) =>\n          html`<div>Earlier sibling. ${content} Later sibling.</div>`;\n\n        // Render twice so that `update` is called.\n        render(makeTemplate(checkPart()), container);\n        render(makeTemplate(checkPart()), container);\n      });\n\n      test(`part's parentNode is the logical DOM parent`, async () => {\n        let resolve: () => void;\n        let reject: (e: unknown) => void;\n        // This Promise settles when then until() directive calls the directive\n        // in asyncCheckDiv.\n        const asyncCheckDivRendered = new Promise<void>((res, rej) => {\n          resolve = res;\n          reject = rej;\n        });\n        const asyncCheckDiv = Promise.resolve(\n          checkPart('div', (e?: unknown) =>\n            e === undefined ? resolve() : reject(e)\n          )\n        );\n        const makeTemplate = () =>\n          html`\n            ${checkPart('container')}\n            <div id=\"div\">\n              ${checkPart('div')}\n              ${html`x ${checkPart('div')} x`}\n              ${html`x ${html`x ${checkPart('div')} x`} x`}\n              ${html`x ${html`x ${[checkPart('div'), checkPart('div')]} x`} x`}\n              ${html`x ${html`x ${[\n                [checkPart('div'), checkPart('div')],\n              ]} x`} x`}\n              ${html`x ${html`x ${[\n                [repeat([checkPart('div'), checkPart('div')], (v) => v)],\n              ]} x`} x`}\n              ${until(asyncCheckDiv)}\n            </div>\n          `;\n\n        render(makeTemplate(), container);\n        await asyncCheckDivRendered;\n      });\n\n      test(`when the parentNode is null`, async () => {\n        const template = () => html`${checkPart('container')}`;\n\n        // Render the template to instantiate the directive\n        render(template(), container);\n\n        // Manually clear the container to detach the directive\n        container.innerHTML = '';\n\n        // Check that we can access parentNode\n        assert.equal(currentDirective.part!.parentNode, undefined);\n      });\n\n      test(`part's parentNode is correct when rendered into a document fragment`, async () => {\n        debugger;\n        const fragment = document.createDocumentFragment();\n        (fragment as unknown as {id: string}).id = 'fragment';\n        const makeTemplate = () => html`${checkPart('fragment')}`;\n\n        // Render twice so that `update` is called.\n        render(makeTemplate(), fragment);\n        render(makeTemplate(), fragment);\n      });\n    });\n\n    test('directives are stateful', () => {\n      const go = (v: string) => {\n        render(html`<div>${count(v)}</div>`, container);\n      };\n      go('A');\n      assertContent('<div>A:1</div>');\n      go('A');\n      assertContent('<div>A:2</div>');\n      go('B');\n      assertContent('<div>B:3</div>');\n    });\n\n    test('directives can update', () => {\n      let receivedPart: ChildPart;\n      let receivedValue: unknown;\n\n      class TestUpdateDirective extends Directive {\n        render(v: unknown) {\n          return v;\n        }\n\n        override update(part: ChildPart, [v]: Parameters<this['render']>) {\n          receivedPart = part;\n          receivedValue = v;\n          return this.render(v);\n        }\n      }\n      const update = directive(TestUpdateDirective);\n      const go = (v: boolean) => {\n        render(html`<div>${update(v)}</div>`, container);\n      };\n      go(true);\n      assertContent('<div>true</div>');\n      assert.equal(receivedPart!.type, PartType.CHILD);\n      assert.equal(receivedValue, true);\n    });\n\n    test('renders directives on AttributeParts', () => {\n      const go = () => html`<div foo=${count('A')}></div>`;\n      assertRender(go(), '<div foo=\"A:1\"></div>');\n      assertRender(go(), '<div foo=\"A:2\"></div>');\n    });\n\n    test('renders multiple directives on AttributeParts', () => {\n      const go = () => html`<div foo=\"a:${count('A')}:b:${count('B')}\"></div>`;\n      assertRender(go(), '<div foo=\"a:A:1:b:B:1\"></div>');\n      assertRender(go(), '<div foo=\"a:A:2:b:B:2\"></div>');\n    });\n\n    test('PartInfo includes metadata for directive in AttributeParts', () => {\n      let partInfo: PartInfo;\n      const testDirective = directive(\n        class extends Directive {\n          constructor(info: PartInfo) {\n            super(info);\n            partInfo = info;\n          }\n          render(v: unknown) {\n            return v;\n          }\n        }\n      );\n      assertRender(\n        html`<div title=\"a ${testDirective(1)} b\"></div>`,\n        '<div title=\"a 1 b\"></div>'\n      );\n      if (partInfo!.type !== PartType.ATTRIBUTE) {\n        throw new Error('Expected attribute PartInfo');\n      }\n      assert.equal(partInfo!.tagName, 'DIV');\n      assert.equal(partInfo!.name, 'title');\n      assert.deepEqual(partInfo!.strings, ['a ', ' b']);\n    });\n\n    test('renders directives on PropertyParts', () => {\n      assertRender(html`<div .foo=${count('A')}></div>`, '<div></div>');\n      assert.strictEqual((container.querySelector('div') as any).foo, 'A:1');\n    });\n\n    test('PartInfo includes metadata for directive in PropertyParts', () => {\n      let partInfo: PartInfo;\n      const testDirective = directive(\n        class extends Directive {\n          constructor(info: PartInfo) {\n            super(info);\n            partInfo = info;\n          }\n          render(v: unknown) {\n            return v;\n          }\n        }\n      );\n      assertRender(\n        html`<div .title=\"a ${testDirective(1)} b\"></div>`,\n        '<div title=\"a 1 b\"></div>'\n      );\n      if (partInfo!.type !== PartType.PROPERTY) {\n        throw new Error('Expected property PartInfo');\n      }\n      assert.equal(partInfo!.tagName, 'DIV');\n      assert.equal(partInfo!.name, 'title');\n      assert.deepEqual(partInfo!.strings, ['a ', ' b']);\n    });\n\n    test('renders directives on EventParts', () => {\n      const handle = directive(\n        class extends Directive {\n          count = 0;\n          render(value: string) {\n            return (e: Event) => {\n              (e.target as any).__clicked = `${value}:${++this.count}`;\n            };\n          }\n        }\n      );\n      const template = (value: string) =>\n        html`<div @click=${handle(value)}></div>`;\n      assertRender(template('A'), '<div></div>');\n      (container.firstElementChild as HTMLDivElement).click();\n      assert.strictEqual((container.firstElementChild as any).__clicked, 'A:1');\n      (container.firstElementChild as HTMLDivElement).click();\n      assert.strictEqual((container.firstElementChild as any).__clicked, 'A:2');\n      render(template('B'), container);\n      (container.firstElementChild as HTMLDivElement).click();\n      assert.strictEqual((container.firstElementChild as any).__clicked, 'B:3');\n      (container.firstElementChild as HTMLDivElement).click();\n      assert.strictEqual((container.firstElementChild as any).__clicked, 'B:4');\n    });\n\n    test('event listeners can see events fired in attribute directives', () => {\n      let event = undefined;\n      const listener = (e: Event) => {\n        event = e;\n      };\n      render(\n        html`<div @test-event=${listener} b=${fireEvent()}></div>`,\n        container\n      );\n      assert.isOk(event);\n    });\n\n    test('event listeners can see events fired in element directives', () => {\n      let event = undefined;\n      const listener = (e: Event) => {\n        event = e;\n      };\n      render(\n        html`<div @test-event=${listener} ${fireEvent()}></div>`,\n        container\n      );\n      assert.isOk(event);\n    });\n\n    test('renders directives on ElementParts', () => {\n      const log: string[] = [];\n      assertRender(html`<div ${count('x', log)}></div>`, `<div></div>`);\n      assert.deepEqual(log, ['x:1']);\n\n      log.length = 0;\n      assertRender(\n        // Purposefully adds a self-closing tag slash\n        html`<div a=${'a'} ${count('x', log)}/></div>`,\n        `<div a=\"a\"></div>`\n      );\n      assert.deepEqual(log, ['x:1']);\n\n      log.length = 0;\n      assertRender(\n        html`<div ${count('x', log)} a=${'a'}>${'A'}</div>${'B'}`,\n        `<div a=\"a\">A</div>B`\n      );\n      assert.deepEqual(log, ['x:1']);\n\n      log.length = 0;\n      assertRender(\n        html`<div a=${'a'} ${count('x', log)} b=${'b'}></div>`,\n        `<div a=\"a\" b=\"b\"></div>`\n      );\n      assert.deepEqual(log, ['x:1']);\n\n      log.length = 0;\n      assertRender(\n        html`<div ${count('x', log)} ${count('y', log)}></div>`,\n        `<div></div>`\n      );\n      assert.deepEqual(log, ['x:1', 'y:1']);\n\n      log.length = 0;\n      const template = html`<div ${count('x', log)} a=${'a'} ${count(\n        'y',\n        log\n      )}></div>`;\n      assertRender(template, `<div a=\"a\"></div>`);\n      assert.deepEqual(log, ['x:1', 'y:1']);\n      log.length = 0;\n      assertRender(template, `<div a=\"a\"></div>`);\n      assert.deepEqual(log, ['x:2', 'y:2']);\n    });\n\n    if (DEV_MODE) {\n      test('EventPart attributes must consist of one value and no extra text', () => {\n        const listener = () => {};\n\n        render(html`<div @click=${listener}></div>`, container);\n        render(html`<div @click=\"${listener}\"></div>`, container);\n\n        assert.throws(() => {\n          render(html`<div @click=EXTRA_TEXT${listener}></div>`, container);\n        });\n        assert.throws(() => {\n          render(html`<div @click=${listener}EXTRA_TEXT></div>`, container);\n        });\n        assert.throws(() => {\n          render(html`<div @click=${listener}${listener}></div>`, container);\n        });\n        assert.throws(() => {\n          render(\n            html`<div @click=\"${listener}EXTRA_TEXT${listener}\"></div>`,\n            container\n          );\n        });\n      });\n\n      skipIfDomParts('Expressions inside template throw in dev mode', () => {\n        // top level\n        assert.throws(() => {\n          render(html`<template>${'test'}</template>`, container);\n        });\n\n        // inside template result\n        assert.throws(() => {\n          render(html`<div><template>${'test'}</template></div>`, container);\n        });\n\n        // child part deep inside\n        assert.throws(() => {\n          render(\n            html`<template>\n            <div><div><div><div>${'test'}</div></div></div></div>\n            </template>`,\n            container\n          );\n        });\n\n        // attr part deep inside\n        assert.throws(() => {\n          render(\n            html`<template>\n            <div><div><div><div class=\"${'test'}\"></div></div></div></div>\n            </template>`,\n            container\n          );\n        });\n\n        // element part deep inside\n        assert.throws(() => {\n          render(\n            html`<template>\n            <div><div><div><div ${'test'}></div></div></div></div>\n            </template>`,\n            container\n          );\n        });\n\n        // attr on element a-ok\n        render(\n          html`<template id=${'test'}>\n          <div>Static content is ok</div>\n            </template>`,\n          container\n        );\n      });\n\n      skipIfDomParts(\n        'Expressions inside nested templates throw in dev mode',\n        () => {\n          // top level\n          assert.throws(\n            () => {\n              render(\n                html`<template><template>${'test'}</template></template>`,\n                container\n              );\n            },\n            undefined,\n            undefined,\n            'top level'\n          );\n\n          // inside template result\n          assert.throws(\n            () => {\n              render(\n                html`<template><div><template>${'test'}</template></template></div>`,\n                container\n              );\n            },\n            undefined,\n            undefined,\n            'inside template result'\n          );\n\n          // child part deep inside\n          assert.throws(\n            () => {\n              render(\n                html`<template><template>\n            <div><div><div><div>${'test'}</div></div></div></div>\n            </template></template>`,\n                container\n              );\n            },\n            undefined,\n            undefined,\n            'child part deep inside'\n          );\n\n          // attr part deep inside\n          assert.throws(\n            () => {\n              render(\n                html`<template><template>\n            <div><div><div><div class=\"${'test'}\"></div></div></div></div>\n            </template></template>`,\n                container\n              );\n            },\n            undefined,\n            undefined,\n            'attr part deep inside'\n          );\n\n          // attr part deep inside\n          assert.throws(\n            () => {\n              render(\n                html`<template><template>\n            <div><div><div><div ${'test'}></div></div></div></div>\n            </template></template>`,\n                container\n              );\n            },\n            undefined,\n            undefined,\n            'attr part deep inside 2'\n          );\n\n          // attr on element a-ok\n          render(\n            html`<template id=${'test'}><template>\n          <div>Static content is ok</div>\n            </template></template>`,\n            container\n          );\n        }\n      );\n    }\n\n    test('directives have access to renderOptions', () => {\n      const hostEl = document.createElement('input');\n      hostEl.value = 'host';\n\n      class HostDirective extends Directive {\n        host?: HTMLInputElement;\n\n        render(v: string) {\n          return `${(this.host as HTMLInputElement)?.value}:${v}`;\n        }\n\n        override update(part: Part, props: [v: string]) {\n          this.host ??= part.options!.host as HTMLInputElement;\n          return this.render(...props);\n        }\n      }\n      const hostDirective = directive(HostDirective);\n\n      render(\n        html`<div attr=${hostDirective('attr')}>${hostDirective('node')}</div>`,\n        container,\n        {host: hostEl, useDomParts: domPartsSupported}\n      );\n      assertContent('<div attr=\"host:attr\">host:node</div>');\n    });\n\n    suite('nested directives', () => {\n      const aNothingDirective = directive(\n        class extends Directive {\n          render(bool: boolean, v: unknown) {\n            return bool ? v : nothing;\n          }\n        }\n      );\n\n      let bDirectiveCount = 0;\n      const bDirective = directive(\n        class extends Directive {\n          count = 0;\n          constructor(part: PartInfo) {\n            super(part);\n            bDirectiveCount++;\n          }\n          render(v: unknown) {\n            return `[B:${this.count++}:${v}]`;\n          }\n        }\n      );\n\n      test('nested directives in ChildPart', () => {\n        bDirectiveCount = 0;\n        const template = (bool: boolean, v: unknown) =>\n          html`<div>${aNothingDirective(bool, bDirective(v))}`;\n        assertRender(template(true, 'X'), `<div>[B:0:X]</div>`);\n        assertRender(template(true, 'Y'), `<div>[B:1:Y]</div>`);\n        assertRender(template(false, 'X'), `<div></div>`);\n        assertRender(template(true, 'X'), `<div>[B:0:X]</div>`);\n        assert.equal(bDirectiveCount, 2);\n      });\n\n      test('nested directives in AttributePart', () => {\n        bDirectiveCount = 0;\n        const template = (bool: boolean, v: unknown) =>\n          html`<div a=${aNothingDirective(bool, bDirective(v))}></div>`;\n        assertRender(template(true, 'X'), `<div a=\"[B:0:X]\"></div>`);\n        assertRender(template(true, 'Y'), `<div a=\"[B:1:Y]\"></div>`);\n        assertRender(template(false, 'X'), `<div></div>`);\n        assertRender(template(true, 'X'), `<div a=\"[B:0:X]\"></div>`);\n        assert.equal(bDirectiveCount, 2);\n      });\n\n      suite('nested directives whose parent returns `noChange`', () => {\n        const aNoChangeDirective = directive(\n          class extends Directive {\n            render(bool: boolean, v: unknown) {\n              return bool ? v : noChange;\n            }\n          }\n        );\n\n        test('nested directives in ChildPart', () => {\n          bDirectiveCount = 0;\n          const template = (bool: boolean, v: unknown) =>\n            html`<div>${aNoChangeDirective(bool, bDirective(v))}`;\n          assertRender(template(true, 'X'), `<div>[B:0:X]</div>`);\n          assertRender(template(true, 'Y'), `<div>[B:1:Y]</div>`);\n          assertRender(template(false, 'X'), `<div>[B:1:Y]</div>`);\n          assertRender(template(true, 'X'), `<div>[B:2:X]</div>`);\n          assertRender(template(false, 'Y'), `<div>[B:2:X]</div>`);\n          assert.equal(bDirectiveCount, 1);\n        });\n\n        test('nested directives in AttributePart', () => {\n          bDirectiveCount = 0;\n          const template = (bool: boolean, v: unknown) =>\n            html`<div a=${aNoChangeDirective(bool, bDirective(v))}></div>`;\n          assertRender(template(true, 'X'), `<div a=\"[B:0:X]\"></div>`);\n          assertRender(template(true, 'Y'), `<div a=\"[B:1:Y]\"></div>`);\n          assertRender(template(false, 'X'), `<div a=\"[B:1:Y]\"></div>`);\n          assertRender(template(true, 'X'), `<div a=\"[B:2:X]\"></div>`);\n          assertRender(template(false, 'Y'), `<div a=\"[B:2:X]\"></div>`);\n          assert.equal(bDirectiveCount, 1);\n        });\n      });\n    });\n  });\n\n  suite('async directives', () => {\n    class ADirective extends AsyncDirective {\n      value: unknown;\n      promise!: Promise<unknown>;\n      render(_promise: Promise<unknown>) {\n        return 'initial';\n      }\n      override update(_part: Part, [promise]: Parameters<this['render']>) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        aDirectiveInst = this;\n        if (promise !== this.promise) {\n          this.promise = promise;\n          promise.then((value) => this.setValue((this.value = value)));\n        }\n        return this.value ?? this.render(promise);\n      }\n    }\n    const aDirective = directive(ADirective);\n    let aDirectiveInst: ADirective;\n\n    const bDirective = directive(\n      class extends Directive {\n        count = 0;\n        render(v: unknown) {\n          return `[B:${this.count++}:${v}]`;\n        }\n      }\n    );\n\n    const syncAsyncDirective = directive(\n      class extends AsyncDirective {\n        render(x: string) {\n          this.setValue(x);\n          return noChange;\n        }\n      }\n    );\n\n    test('async directive can call setValue synchronously', () => {\n      assertRender(\n        html`<div foo=${syncAsyncDirective('test')}>${syncAsyncDirective(\n          'test'\n        )}</div>`,\n        '<div foo=\"test\">test</div>'\n      );\n    });\n\n    test('async directives in ChildPart', async () => {\n      const template = (promise: Promise<unknown>) =>\n        html`<div>${aDirective(promise)}</div>`;\n      let promise = Promise.resolve('resolved1');\n      assertRender(template(promise), `<div>initial</div>`);\n      await promise;\n      assertContent(`<div>resolved1</div>`);\n      promise = Promise.resolve('resolved2');\n      assertRender(template(promise), `<div>resolved1</div>`);\n      await promise;\n      assertContent(`<div>resolved2</div>`);\n    });\n\n    test('async directives change to disconnected in ChildPart', async () => {\n      const template = (promise: Promise<unknown>) =>\n        html`<div>${aDirective(promise)}</div>`;\n      const promise = Promise.resolve('resolved1');\n      const part = assertRender(template(promise), `<div>initial</div>`);\n      assert.isTrue(aDirectiveInst.isConnected);\n      part.setConnected(false);\n      assertContent(`<div>initial</div>`);\n      await promise;\n      assert.isFalse(aDirectiveInst.isConnected);\n      assertContent(`<div>resolved1</div>`);\n      part.setConnected(true);\n      assert.isTrue(aDirectiveInst.isConnected);\n      assertContent(`<div>resolved1</div>`);\n    });\n\n    test('async directives render while disconnected in ChildPart', async () => {\n      const template = (v: unknown) => html`<div>${v}</div>`;\n      const promise = Promise.resolve('resolved1');\n      const part = assertRender(template('initial'), `<div>initial</div>`);\n      part.setConnected(false);\n      assertRender(template(aDirective(promise)), `<div>initial</div>`);\n      assert.isFalse(aDirectiveInst.isConnected);\n      await promise;\n      assertContent(`<div>resolved1</div>`);\n      assert.isFalse(aDirectiveInst.isConnected);\n      part.setConnected(true);\n      assert.isTrue(aDirectiveInst.isConnected);\n      assertRender(template(aDirective(promise)), `<div>resolved1</div>`);\n    });\n\n    test('async directives while disconnected in ChildPart clears its value', async () => {\n      const log: string[] = [];\n      const template = (promise: Promise<unknown>) =>\n        html`<div>${aDirective(promise)}</div>`;\n      // Async render a TemplateResult containing a AsyncDirective\n      let promise: Promise<unknown> = Promise.resolve(\n        html`${disconnectingDirective(log, 'dd', 'dd')}`\n      );\n      const part = assertRender(template(promise), `<div>initial</div>`);\n      await promise;\n      assertContent(`<div>dd</div>`);\n      // Eneuque an async clear of the TemplateResult+AsyncDirective\n      promise = Promise.resolve(nothing);\n      assertRender(template(promise), `<div>dd</div>`, undefined);\n      assert.deepEqual(log, []);\n      // Disconnect the tree before the clear is committed\n      part.setConnected(false);\n      assert.isFalse(aDirectiveInst.isConnected);\n      assert.deepEqual(log, ['disconnected-dd']);\n      await promise;\n      assert.deepEqual(log, ['disconnected-dd']);\n      assertContent(`<div></div>`);\n      // Re-connect the tree, which should clear the part but not reconnect\n      // the AsyncDirective that was cleared\n      part.setConnected(true);\n      assert.isTrue(aDirectiveInst.isConnected);\n      assertRender(template(promise), `<div></div>`);\n      assert.deepEqual(log, ['disconnected-dd']);\n    });\n\n    test('async nested directives in ChildPart', async () => {\n      const template = (promise: Promise<unknown>) =>\n        html`<div>${aDirective(promise)}</div>`;\n      let promise = Promise.resolve(bDirective('X'));\n      assertRender(template(promise), `<div>initial</div>`);\n      await promise;\n      assertContent(`<div>[B:0:X]</div>`);\n      assertRender(template(promise), `<div>[B:1:X]</div>`);\n      promise = Promise.resolve(bDirective('Y'));\n      assertRender(template(promise), `<div>[B:2:X]</div>`);\n      await promise;\n      assertContent(`<div>[B:3:Y]</div>`);\n    });\n\n    test('async directives in AttributePart', async () => {\n      const template = (promise: Promise<unknown>) =>\n        html`<div a=\"${'**'}${aDirective(promise)}${'##'}\"></div>`;\n      let promise = Promise.resolve('resolved1');\n      assertRender(template(promise), `<div a=\"**initial##\"></div>`);\n      await promise;\n      assertContent(`<div a=\"**resolved1##\"></div>`);\n      promise = Promise.resolve('resolved2');\n      assertRender(template(promise), `<div a=\"**resolved1##\"></div>`);\n      await promise;\n      assertContent(`<div a=\"**resolved2##\"></div>`);\n    });\n\n    test('async directives while disconnected in AttributePart', async () => {\n      const template = (promise: Promise<unknown>) =>\n        html`<div a=\"${'**'}${aDirective(promise)}${'##'}\"></div>`;\n      const promise = Promise.resolve('resolved1');\n      const part = assertRender(\n        template(promise),\n        `<div a=\"**initial##\"></div>`\n      );\n      part.setConnected(false);\n      assert.isFalse(aDirectiveInst.isConnected);\n      await promise;\n      assertContent(`<div a=\"**resolved1##\"></div>`);\n      part.setConnected(true);\n      assert.isTrue(aDirectiveInst.isConnected);\n      assertContent(`<div a=\"**resolved1##\"></div>`);\n    });\n\n    test('async nested directives in AttributePart', async () => {\n      const template = (promise: Promise<unknown>) =>\n        html`<div a=\"${'**'}${aDirective(promise)}${'##'}\"></div>`;\n      let promise = Promise.resolve(bDirective('X'));\n      assertRender(template(promise), `<div a=\"**initial##\"></div>`);\n      await promise;\n      assertContent(`<div a=\"**[B:0:X]##\"></div>`);\n      promise = Promise.resolve(bDirective('Y'));\n      assertRender(template(promise), `<div a=\"**[B:1:X]##\"></div>`);\n      await promise;\n      assertContent(`<div a=\"**[B:2:Y]##\"></div>`);\n    });\n\n    const disconnectingDirective = directive(\n      class extends AsyncDirective {\n        log!: Array<string>;\n        id!: string;\n\n        render(log: Array<string>, id = '', value?: unknown, bool = true) {\n          this.log = log;\n          this.id = id;\n          return bool ? value : nothing;\n        }\n\n        override disconnected() {\n          this.log.push('disconnected' + (this.id ? `-${this.id}` : ''));\n        }\n        override reconnected() {\n          this.log.push('reconnected' + (this.id ? `-${this.id}` : ''));\n        }\n      }\n    );\n\n    const passthroughDirective = directive(\n      class extends Directive {\n        render(value: unknown, bool = true) {\n          return bool ? value : nothing;\n        }\n      }\n    );\n\n    test('directives can be disconnected from ChildParts', () => {\n      const log: Array<string> = [];\n      const go = (x: boolean) =>\n        render(html`${x ? disconnectingDirective(log) : nothing}`, container);\n      go(true);\n      assert.isEmpty(log);\n      go(false);\n      assert.deepEqual(log, ['disconnected']);\n    });\n\n    test('directives are disconnected when their template is', () => {\n      const log: Array<string> = [];\n      const go = (x: boolean) =>\n        render(x ? html`${disconnectingDirective(log)}` : nothing, container);\n      go(true);\n      assert.isEmpty(log);\n      go(false);\n      assert.deepEqual(log, ['disconnected']);\n    });\n\n    test('directives are disconnected when their nested template is', () => {\n      const log: Array<string> = [];\n      const go = (x: boolean) =>\n        render(\n          x ? html`${html`${disconnectingDirective(log)}`}` : nothing,\n          container\n        );\n      go(true);\n      assert.isEmpty(log);\n      go(false);\n      assert.deepEqual(log, ['disconnected']);\n    });\n\n    test('directives in different subtrees can be disconnected in separate renders', () => {\n      const log: Array<string> = [];\n      const go = (left: boolean, right: boolean) =>\n        render(\n          html`\n            ${html`${html`${\n              left ? disconnectingDirective(log, 'left') : nothing\n            }`}`}\n            ${html`${html`${\n              right ? disconnectingDirective(log, 'right') : nothing\n            }`}`}\n          `,\n          container\n        );\n      go(true, true);\n      assert.isEmpty(log);\n      go(true, false);\n      assert.deepEqual(log, ['disconnected-right']);\n      log.length = 0;\n      go(false, false);\n      assert.deepEqual(log, ['disconnected-left']);\n      log.length = 0;\n      go(true, true);\n      assert.isEmpty(log);\n      go(false, true);\n      assert.deepEqual(log, ['disconnected-left']);\n      log.length = 0;\n      go(false, false);\n      assert.deepEqual(log, ['disconnected-right']);\n    });\n\n    test('directives returned from other directives can be disconnected', () => {\n      const log: Array<string> = [];\n      const go = (clearAll: boolean, left: boolean, right: boolean) =>\n        render(\n          clearAll\n            ? nothing\n            : html`\n            ${html`${html`${passthroughDirective(\n              disconnectingDirective(log, 'left'),\n              left\n            )}`}`}\n            ${html`${html`${passthroughDirective(\n              disconnectingDirective(log, 'right'),\n              right\n            )}`}`}\n          `,\n          container\n        );\n      go(false, true, true);\n      assert.isEmpty(log);\n      go(true, true, true);\n      assert.deepEqual(log, ['disconnected-left', 'disconnected-right']);\n      log.length = 0;\n      go(false, true, true);\n      assert.isEmpty(log);\n      go(false, true, false);\n      assert.deepEqual(log, ['disconnected-right']);\n      log.length = 0;\n      go(false, false, false);\n      assert.deepEqual(log, ['disconnected-left']);\n      log.length = 0;\n      go(false, true, true);\n      assert.isEmpty(log);\n      go(false, false, true);\n      assert.deepEqual(log, ['disconnected-left']);\n      log.length = 0;\n      go(false, false, false);\n      assert.deepEqual(log, ['disconnected-right']);\n    });\n\n    test('directives returned from other AsyncDirectives can be disconnected', () => {\n      const log: Array<string> = [];\n      const go = (\n        clearAll: boolean,\n        leftOuter: boolean,\n        leftInner: boolean,\n        rightOuter: boolean,\n        rightInner: boolean\n      ) =>\n        render(\n          clearAll\n            ? nothing\n            : html`\n            ${html`${html`${\n              leftOuter\n                ? disconnectingDirective(\n                    log,\n                    'left-outer',\n                    disconnectingDirective(log, 'left-inner'),\n                    leftInner\n                  )\n                : nothing\n            }`}`}\n            ${html`${html`${\n              rightOuter\n                ? disconnectingDirective(\n                    log,\n                    'right-outer',\n                    disconnectingDirective(log, 'right-inner'),\n                    rightInner\n                  )\n                : nothing\n            }`}`}\n          `,\n          container\n        );\n      go(false, true, true, true, true);\n      assert.isEmpty(log);\n      go(true, true, true, true, true);\n      assert.deepEqual(log, [\n        'disconnected-left-outer',\n        'disconnected-left-inner',\n        'disconnected-right-outer',\n        'disconnected-right-inner',\n      ]);\n      log.length = 0;\n      go(false, true, true, true, true);\n      assert.isEmpty(log);\n      go(false, false, true, true, true);\n      assert.deepEqual(log, [\n        'disconnected-left-outer',\n        'disconnected-left-inner',\n      ]);\n      log.length = 0;\n      go(false, true, true, true, true);\n      assert.isEmpty(log);\n      go(false, true, true, false, true);\n      assert.deepEqual(log, [\n        'disconnected-right-outer',\n        'disconnected-right-inner',\n      ]);\n      log.length = 0;\n      go(false, true, true, true, true);\n      assert.isEmpty(log);\n      go(false, true, false, true, true);\n      assert.deepEqual(log, ['disconnected-left-inner']);\n      log.length = 0;\n      go(false, true, false, true, false);\n      assert.deepEqual(log, ['disconnected-right-inner']);\n    });\n\n    test('directives can be disconnected from AttributeParts', () => {\n      const log: Array<string> = [];\n      const go = (x: boolean) =>\n        render(\n          x ? html`<div foo=${disconnectingDirective(log)}></div>` : nothing,\n          container\n        );\n      go(true);\n      assert.isEmpty(log);\n      go(false);\n      assert.deepEqual(log, ['disconnected']);\n    });\n\n    test('deeply nested directives can be disconnected from AttributeParts', () => {\n      const log: Array<string> = [];\n      const go = (x: boolean) =>\n        render(\n          x\n            ? html`${html`<div foo=${disconnectingDirective(log)}></div>`}`\n            : nothing,\n          container\n        );\n      go(true);\n      assert.isEmpty(log);\n      go(false);\n      assert.deepEqual(log, ['disconnected']);\n    });\n\n    test('directives can be disconnected from iterables', () => {\n      const log: Array<string> = [];\n      const go = (items: string[] | undefined) =>\n        render(\n          items\n            ? items.map(\n                (item) =>\n                  html`<div foo=${disconnectingDirective(log, item)}></div>`\n              )\n            : nothing,\n          container\n        );\n      go(['0', '1', '2', '3']);\n      assert.isEmpty(log);\n      go(['0', '2']);\n      assert.deepEqual(log, ['disconnected-2', 'disconnected-3']);\n      log.length = 0;\n      go(undefined);\n      assert.deepEqual(log, ['disconnected-0', 'disconnected-2']);\n    });\n\n    test('directives can be disconnected from repeat', () => {\n      const log: Array<string> = [];\n      const go = (items: string[] | undefined) =>\n        render(\n          items\n            ? repeat(\n                items,\n                (item) => item,\n                (item) =>\n                  html`<div foo=${disconnectingDirective(log, item)}></div>`\n              )\n            : nothing,\n          container\n        );\n      go(['0', '1', '2', '3']);\n      assert.isEmpty(log);\n      go(['0', '2']);\n      assert.deepEqual(log, ['disconnected-1', 'disconnected-3']);\n      log.length = 0;\n      go(undefined);\n      assert.deepEqual(log, ['disconnected-0', 'disconnected-2']);\n    });\n\n    test('directives in ChildParts can be reconnected', () => {\n      const log: Array<string> = [];\n      const go = (left: boolean, right: boolean) => {\n        return render(\n          html`\n            ${html`${html`${\n              left ? disconnectingDirective(log, 'left') : nothing\n            }`}`}\n            ${html`${html`${\n              right ? disconnectingDirective(log, 'right') : nothing\n            }`}`}\n          `,\n          container\n        );\n      };\n      const part = go(true, true);\n      assert.isEmpty(log);\n      part.setConnected(false);\n      assert.deepEqual(log, ['disconnected-left', 'disconnected-right']);\n      log.length = 0;\n      part.setConnected(true);\n      assert.deepEqual(log, ['reconnected-left', 'reconnected-right']);\n      log.length = 0;\n      go(true, false);\n      assert.deepEqual(log, ['disconnected-right']);\n      log.length = 0;\n      part.setConnected(false);\n      assert.deepEqual(log, ['disconnected-left']);\n      log.length = 0;\n      part.setConnected(true);\n      assert.deepEqual(log, ['reconnected-left']);\n    });\n\n    test('directives in AttributeParts can be reconnected', () => {\n      const log: Array<string> = [];\n      const go = (left: boolean, right: boolean) => {\n        return render(\n          html`\n            ${html`${html`<div a=${\n              left ? disconnectingDirective(log, 'left') : nothing\n            }></div>`}`}\n            ${html`${html`<div a=${\n              right ? disconnectingDirective(log, 'right') : nothing\n            }></div>`}`}\n          `,\n          container\n        );\n      };\n      const part = go(true, true);\n      assert.isEmpty(log);\n      part.setConnected(false);\n      assert.deepEqual(log, ['disconnected-left', 'disconnected-right']);\n      log.length = 0;\n      part.setConnected(true);\n      assert.deepEqual(log, ['reconnected-left', 'reconnected-right']);\n      log.length = 0;\n      go(true, false);\n      assert.deepEqual(log, ['disconnected-right']);\n      log.length = 0;\n      part.setConnected(false);\n      assert.deepEqual(log, ['disconnected-left']);\n      log.length = 0;\n      part.setConnected(true);\n      assert.deepEqual(log, ['reconnected-left']);\n    });\n\n    test('directives in iterables can be reconnected', () => {\n      const log: Array<string> = [];\n      const go = (left: unknown[], right: unknown[]) => {\n        return render(\n          html`\n            ${html`${html`${left.map(\n              (i) =>\n                html`<div>${disconnectingDirective(log, `left-${i}`)}</div>`\n            )}`}`}\n            ${html`${html`${right.map(\n              (i) =>\n                html`<div>${disconnectingDirective(log, `right-${i}`)}</div>`\n            )}`}`}\n          `,\n          container\n        );\n      };\n      const part = go([0, 1], [0, 1]);\n      assert.isEmpty(log);\n      part.setConnected(false);\n      assert.deepEqual(log, [\n        'disconnected-left-0',\n        'disconnected-left-1',\n        'disconnected-right-0',\n        'disconnected-right-1',\n      ]);\n      log.length = 0;\n      part.setConnected(true);\n      assert.deepEqual(log, [\n        'reconnected-left-0',\n        'reconnected-left-1',\n        'reconnected-right-0',\n        'reconnected-right-1',\n      ]);\n      log.length = 0;\n      go([0], []);\n      assert.deepEqual(log, [\n        'disconnected-left-1',\n        'disconnected-right-0',\n        'disconnected-right-1',\n      ]);\n      log.length = 0;\n      part.setConnected(false);\n      assert.deepEqual(log, ['disconnected-left-0']);\n      log.length = 0;\n      part.setConnected(true);\n      assert.deepEqual(log, ['reconnected-left-0']);\n    });\n\n    test('directives in repeat can be reconnected', () => {\n      const log: Array<string> = [];\n      const go = (left: unknown[], right: unknown[]) => {\n        return render(\n          html`\n            ${html`${html`${repeat(\n              left,\n              (i) =>\n                html`<div>${disconnectingDirective(log, `left-${i}`)}</div>`\n            )}`}`}\n            ${html`${html`${repeat(\n              right,\n              (i) =>\n                html`<div>${disconnectingDirective(log, `right-${i}`)}</div>`\n            )}`}`}\n          `,\n          container\n        );\n      };\n      const part = go([0, 1], [0, 1]);\n      assert.isEmpty(log);\n      part.setConnected(false);\n      assert.deepEqual(log, [\n        'disconnected-left-0',\n        'disconnected-left-1',\n        'disconnected-right-0',\n        'disconnected-right-1',\n      ]);\n      log.length = 0;\n      part.setConnected(true);\n      assert.deepEqual(log, [\n        'reconnected-left-0',\n        'reconnected-left-1',\n        'reconnected-right-0',\n        'reconnected-right-1',\n      ]);\n      log.length = 0;\n      go([0], []);\n      assert.deepEqual(log, [\n        'disconnected-left-1',\n        'disconnected-right-0',\n        'disconnected-right-1',\n      ]);\n      log.length = 0;\n      part.setConnected(false);\n      assert.deepEqual(log, ['disconnected-left-0']);\n      log.length = 0;\n      part.setConnected(true);\n      assert.deepEqual(log, ['reconnected-left-0']);\n    });\n  });\n\n  // suite('spread', () => {\n  //   test('renders a static attr result', () => {\n  //     render(html`<div ${attr`foo=bar`} a=\"b\"></div>`, container);\n  //     assert.equal(\n  //       stripExpressionComments(container.innerHTML),\n  //       '<div a=\"b\" foo=\"bar\"></div>'\n  //     );\n  //   });\n\n  //   test('renders a dynamic attr result', () => {\n  //     render(html`<div ${attr`foo=${'bar'}`} a=\"b\"></div>`, container);\n  //     assert.equal(\n  //       stripExpressionComments(container.innerHTML),\n  //       '<div a=\"b\" foo=\"bar\"></div>'\n  //     );\n  //   });\n\n  //   test.skip('renders a property', () => {\n  //     render(html`<div ${attr`.foo=${'bar'}`} a=\"b\"></div>`, container);\n  //     assert.equal(\n  //       stripExpressionComments(container.innerHTML),'<div a=\"b\"></div>'\n  //     );\n  //     const div = container.querySelector('div');\n  //     assert.equal((div as any).foo, 'bar');\n  //   });\n  // });\n\n  const securityHooksSuiteFunction = DEV_MODE ? suite : suite.skip;\n\n  securityHooksSuiteFunction('enhanced security hooks', () => {\n    class FakeSanitizedWrapper {\n      sanitizeTo: string;\n      constructor(sanitizeTo: string) {\n        this.sanitizeTo = sanitizeTo;\n      }\n\n      toString() {\n        return `FakeSanitizedWrapper(${this.sanitizeTo})`;\n      }\n    }\n    const sanitizerCalls: Array<{\n      name: string;\n      type: 'property' | 'attribute' | 'text';\n      nodeName: string;\n      values: readonly unknown[];\n    }> = [];\n    const testSanitizer = (value: unknown) => {\n      if (value instanceof FakeSanitizedWrapper) {\n        return value.sanitizeTo;\n      }\n      return 'safeString';\n    };\n    const testSanitizerFactory: SanitizerFactory = (node, name, type) => {\n      const values: unknown[] = [];\n      sanitizerCalls.push({values, name, type, nodeName: node.nodeName});\n      return (value) => {\n        values.push(value);\n        return testSanitizer(value);\n      };\n    };\n    setup(() => {\n      setSanitizer(testSanitizerFactory);\n    });\n    teardown(() => {\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse();\n      sanitizerCalls.length = 0;\n    });\n\n    test('sanitizes text content when the text is alone', () => {\n      const getTemplate = (value: unknown) => html`<div>${value}</div>`;\n      assertRender(getTemplate('foo'), '<div>safeString</div>');\n\n      const safeFoo = new FakeSanitizedWrapper('foo');\n      assertRender(getTemplate(safeFoo), '<div>foo</div>');\n\n      assert.deepEqual(sanitizerCalls, [\n        {\n          values: ['foo', safeFoo],\n          name: 'data',\n          type: 'property',\n          nodeName: '#text',\n        },\n      ]);\n    });\n\n    test('sanitizes text content when the text is interpolated', () => {\n      const getTemplate = (value: unknown) =>\n        html`<div>hello ${value} world</div>`;\n      assertRender(getTemplate('big'), '<div>hello safeString world</div>');\n\n      const safeBig = new FakeSanitizedWrapper('big');\n\n      assertRender(getTemplate(safeBig), '<div>hello big world</div>');\n\n      assert.deepEqual(sanitizerCalls, [\n        {\n          values: ['big', safeBig],\n          name: 'data',\n          type: 'property',\n          nodeName: '#text',\n        },\n      ]);\n    });\n\n    test('sanitizes full attribute values', () => {\n      const getTemplate = (value: unknown) => html`<div attrib=${value}></div>`;\n      assertRender(getTemplate('bad'), '<div attrib=\"safeString\"></div>');\n\n      const safe = new FakeSanitizedWrapper('good');\n      assertRender(getTemplate(safe), '<div attrib=\"good\"></div>');\n\n      assert.deepEqual(sanitizerCalls, [\n        {\n          values: ['bad', safe],\n          name: 'attrib',\n          type: 'attribute',\n          nodeName: 'DIV',\n        },\n      ]);\n    });\n\n    test('sanitizes concatenated attributes after concatenation', () => {\n      assertRender(\n        html`<div attrib=\"hello ${'big'} world\"></div>`,\n        '<div attrib=\"safeString\"></div>'\n      );\n\n      assert.deepEqual(sanitizerCalls, [\n        {\n          values: ['hello big world'],\n          name: 'attrib',\n          type: 'attribute',\n          nodeName: 'DIV',\n        },\n      ]);\n    });\n\n    test('sanitizes properties', () => {\n      const getTemplate = (value: unknown) => html`<div .foo=${value}></div>`;\n      assertRender(getTemplate('bad'), '<div></div>');\n      assert.equal((container.querySelector('div')! as any).foo, 'safeString');\n\n      const safe = new FakeSanitizedWrapper('good');\n      assertRender(getTemplate(safe), '<div></div>');\n      assert.equal((container.querySelector('div')! as any).foo, 'good');\n\n      assert.deepEqual(sanitizerCalls, [\n        {values: ['bad', safe], name: 'foo', type: 'property', nodeName: 'DIV'},\n      ]);\n    });\n  });\n\n  test(`don't render simple spoof template results`, () => {\n    const spoof = {\n      ['_$litType$']: 1,\n      strings: ['<div>spoofed string</div>'],\n      values: [],\n    };\n    const template = html`<div>${spoof}</div>`;\n    let threwError = false;\n    try {\n      render(template, container);\n    } catch {\n      threwError = true;\n    }\n    assertContent('');\n    assert.isTrue(\n      threwError,\n      `Expected an error when rendering a spoofed template result`\n    );\n  });\n\n  const warningsSuiteFunction = DEV_MODE ? suite : suite.skip;\n\n  warningsSuiteFunction('warnings', () => {\n    let originalWarn: (...data: any[]) => void;\n    let warnings: Array<unknown[]>;\n    setup(() => {\n      warnings = [];\n      originalWarn = console.warn;\n      console.warn = (...args: unknown[]) => {\n        warnings.push(args);\n        return originalWarn!.call(console, ...args);\n      };\n    });\n\n    teardown(() => {\n      console.warn = originalWarn!;\n    });\n\n    const assertWarning = (m?: string) => {\n      assert.equal(warnings!.length, 1);\n      if (m) {\n        assert.include(warnings[0][0], m);\n      }\n      warnings = [];\n    };\n\n    test('warns on octal escape', () => {\n      try {\n        render(html`\\2022`, container);\n        assert.fail();\n      } catch (e) {\n        assertWarning('escape');\n      }\n    });\n  });\n});\n"]}