{"version":3,"file":"template-from-literals_test.js","sourceRoot":"","sources":["../../src/test/template-from-literals_test.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,oBAAoB,EAAC,MAAM,8BAA8B,CAAC;AAClE,OAAO,EAAC,MAAM,EAAC,MAAM,kBAAkB,CAAC;AAExC,MAAM,IAAI,GAAG,CAAC,OAA6B,EAAE,GAAG,CAAY,EAAE,EAAE,CAAC,OAAO,CAAC;AAEzE,MAAM,CAAC,GAAG,IAAI,CAAC;AAQf,MAAM,SAAS,GAAe;IAC5B;QACE,IAAI,EAAE,OAAO;QACb,KAAK,EAAE,IAAI,CAAA,GAAG;QACd,QAAQ,EAAE,GAAG;KACd;IACD;QACE,IAAI,EAAE,aAAa;QACnB,KAAK,EAAE,IAAI,CAAA,aAAa;QACxB,QAAQ,EAAE,aAAa;KACxB;IACD;QACE,IAAI,EAAE,eAAe;QACrB,KAAK,EAAE,IAAI,CAAA,QAAQ,CAAC,QAAQ;QAC5B,QAAQ,EAAE,8DAA8D;KACzE;IACD;QACE,IAAI,EAAE,iBAAiB;QACvB,KAAK,EAAE,IAAI,CAAA,QAAQ,CAAC,SAAS;QAC7B,QAAQ,EAAE,kCAAkC;KAC7C;IACD;QACE,IAAI,EAAE,mBAAmB;QACzB,KAAK,EAAE,IAAI,CAAA,UAAU,CAAC,SAAS;QAC/B,QAAQ,EAAE,6CAA6C;KACxD;IACD;QACE,IAAI,EAAE,2BAA2B;QACjC,KAAK,EAAE,IAAI,CAAA,aAAa,CAAC,MAAM,CAAC,YAAY;QAC5C,QAAQ,EAAE,uDAAuD;KAClE;IACD;QACE,IAAI,EAAE,eAAe;QACrB,KAAK,EAAE,IAAI,CAAA,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ;QACjF,QAAQ,EAAE,mRAAmR;KAC9R;IACD;QACE,IAAI,EAAE,yBAAyB;QAC/B,KAAK,EAAE,IAAI,CAAA,cAAc,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS;QAC3D,QAAQ,EAAE,mFAAmF;KAC9F;CACF,CAAC;AAEF,KAAK,MAAM,EAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAC,IAAI,SAAS,EAAE;IAC3D,IAAI,MAAM,GAAyC,IAAI,CAAC;IACxD,IAAI,IAAI,EAAE;QACR,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;KACpB;SAAM,IAAI,IAAI,EAAE;QACf,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;KACpB;IACD,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;QAChB,uEAAuE;QACvE,oDAAoD;QACpD,yEAAyE;QACzE,yCAAyC;QACzC,MAAM,KAAK,GAAG,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5D,MAAM,CAAC,SAAS,CACd,KAAK,CAAC,SAAS,EACf,QAAQ,EACR,6DAA6D,CAC9D,CAAC;IACJ,CAAC,CAAC,CAAC;CACJ","sourcesContent":["import {ExclusiveTestFunction, TestFunction} from 'mocha';\nimport {templateFromLiterals} from '../template-from-literals.js';\nimport {assert} from '@esm-bundle/chai';\n\nconst html = (strings: TemplateStringsArray, ..._: unknown[]) => strings;\n\nconst x = null;\ninterface TestCase {\n  name: string;\n  input: TemplateStringsArray;\n  expected: string;\n  only?: boolean;\n  skip?: boolean;\n}\nconst testCases: TestCase[] = [\n  {\n    name: 'empty',\n    input: html` `,\n    expected: ` `,\n  },\n  {\n    name: 'no bindings',\n    input: html`<div></div>`,\n    expected: `<div></div>`,\n  },\n  {\n    name: 'child binding',\n    input: html`<div>${x}</div>`,\n    expected: `<div><!--?child-node-part?--><!--?/child-node-part?--></div>`,\n  },\n  {\n    name: 'element binding',\n    input: html`<div ${x}></div>`,\n    expected: `<!--?node-part d ?--><div></div>`,\n  },\n  {\n    name: 'attribute binding',\n    input: html`<div x=${x}></div>`,\n    expected: `<!--?node-part attr x \"\" \"\" ?--><div></div>`,\n  },\n  {\n    name: 'complex attribute binding',\n    input: html`<div x=\"a ${x} b ${x} c\"></div>`,\n    expected: `<!--?node-part attr x \"a \" \" b \" \" c\" ?--><div></div>`,\n  },\n  {\n    name: 'many bindings',\n    input: html`<div x=\"a ${x} b ${x} c\" ${x} v=${x}>${x}foo ${x} bar ${x}${x}</div>`,\n    expected: `<!--?node-part attr x \"a \" \" b \" \" c\" d attr v \"\" \"\" ?--><div><!--?child-node-part?--><!--?/child-node-part?-->foo <!--?child-node-part?--><!--?/child-node-part?--> bar <!--?child-node-part?--><!--?/child-node-part?--><!--?child-node-part?--><!--?/child-node-part?--></div>`,\n  },\n  {\n    name: 'unusual attribute names',\n    input: html`<div .foo=\"${x}\" @bar=${x} .bazQux=${x}></div>`,\n    expected: `<!--?node-part attr .foo \"\" \"\" attr @bar \"\" \"\" attr .bazQux \"\" \"\" ?--><div></div>`,\n  },\n];\n\nfor (const {name, input, expected, only, skip} of testCases) {\n  let testFn: TestFunction | ExclusiveTestFunction = test;\n  if (only) {\n    testFn = test.only;\n  } else if (skip) {\n    testFn = test.skip;\n  }\n  testFn(name, () => {\n    // in a rather silly situation that needs to be cleaned up, these tests\n    // are only useful when running _without_ DOM parts,\n    // because when they are we don't want to insert processing instructions,\n    // we just create the parts imperatively.\n    const templ = templateFromLiterals(input, undefined, false);\n    assert.deepEqual(\n      templ.innerHTML,\n      expected,\n      `unexpected HTMLTemplateElement.fromLiterals ponyfill output`\n    );\n  });\n}\n"]}