{"version":3,"file":"template-from-literals.js","sources":["../../src/template-from-literals.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {getTemplateHtml} from './get-template-html.js';\nimport {HTML_RESULT, ResultType} from './ttl.js';\n\n// Typings for the DOM Parts proposed standard as described by\n// https://github.com/tbondwilkinson/dom-parts and then implemented in\n// Chrome Canary v117.0.5890.0 with experimental web platform features\n// enabled.\ndeclare global {\n  interface PartRoot {\n    // In-order DOM array of parts.\n    getParts(): Part[];\n  }\n\n  class DocumentPart implements PartRoot {\n    constructor(rootContainer: Document | DocumentFragment);\n\n    getParts(): Part[];\n\n    clone(): DocumentPart;\n\n    readonly rootContainer: Document | DocumentFragment;\n  }\n\n  interface Document {\n    getPartRoot(): DocumentPart;\n  }\n\n  interface DocumentFragment {\n    getPartRoot(): DocumentPart;\n  }\n  interface Part {\n    readonly root?: PartRoot;\n    readonly metadata: string[];\n\n    disconnect(): void;\n  }\n  class NodePart implements Part {\n    readonly root?: PartRoot;\n    readonly metadata: string[];\n\n    readonly node: Node;\n\n    constructor(root: PartRoot, node: Node, init?: {metadata?: string[]});\n\n    disconnect(): void;\n  }\n  class ChildNodePart implements Part, PartRoot {\n    readonly root?: PartRoot;\n    readonly metadata: string[];\n\n    readonly previousSibling: ChildNode;\n    readonly nextSibling: ChildNode;\n\n    constructor(\n      root: PartRoot,\n      previousSibling: Node,\n      nextSibling: Node,\n      init?: {metadata?: string[]}\n    );\n\n    children(): Node[];\n\n    // All parts in this subtree.\n    getParts(): Part[];\n\n    // Replaces the children and parts in this range.\n    replaceChildren(...nodes: Array<Node | string>): void;\n\n    disconnect(): void;\n  }\n}\n\n/**\n * A crack at a simple ponyfill of\n * https://github.com/WICG/webcomponents/issues/1019 extended with an encoding\n * for attribute and element bindings in the returned NodePart's metadata.\n *\n * See the tests at ./test/template-from-literals_test.ts for more info.\n */\nexport function templateFromLiterals(\n  strings: TemplateStringsArray,\n  type: ResultType = HTML_RESULT,\n  useDomParts: boolean,\n): HTMLTemplateElement {\n  const [html, attrNames] = getTemplateHtml(strings, type);\n  let attrNameIdx = 0;\n  const template = document.createElement('template');\n  template.innerHTML = html as unknown as string;\n  const treeWalker = document.createTreeWalker(template.content);\n  let node: Node | null = treeWalker.nextNode();\n  let root;\n  if (useDomParts) {\n    root = template.content.getPartRoot();\n  }\n  while (node !== null) {\n    if (node.nodeType === Node.COMMENT_NODE) {\n      const comment = node as Comment;\n      if (/lit\\$\\d+/.test(comment.data)) {\n        if (useDomParts) {\n          const before = new Text();\n          const after = new Text();\n          comment.before(before);\n          comment.after(after);\n          new ChildNodePart(root!, before, after);\n          node = treeWalker.nextNode();\n          comment.remove();\n          continue;\n        } else {\n          comment.data = '?child-node-part?';\n          comment.after(new Comment('?/child-node-part?'));\n        }\n      }\n    } else if (node.nodeType === Node.ELEMENT_NODE) {\n      const element = node as Element;\n      const metadata: string[] = [];\n      const badAttributes: string[] = [];\n      for (const attr of element.attributes) {\n        if (/lit\\$\\d+\\$\\d+/.test(attr.name)) {\n          metadata.push('d');\n          badAttributes.push(attr.name);\n          continue;\n        }\n        const match = attr.name.match(/^(.*)\\$lit\\$$/);\n        if (match !== null) {\n          metadata.push('attr', attrNames[attrNameIdx]);\n          attrNameIdx++;\n          // const value = attr.value;\n          const regex = /(?:(lit\\$\\d+\\$))|(?:(.+?)(?:lit\\$\\d+\\$))|(.+)/g;\n          let endMatched = false;\n          for (const [_, bindingStart, lit, end] of attr.value.matchAll(\n            regex\n          )) {\n            if (bindingStart !== undefined) {\n              metadata.push('\"\"');\n            } else if (lit !== undefined) {\n              metadata.push(JSON.stringify(lit));\n            } else {\n              metadata.push(JSON.stringify(end));\n              endMatched = true;\n            }\n          }\n          if (endMatched === false) {\n            metadata.push('\"\"');\n          }\n          badAttributes.push(attr.name);\n        }\n      }\n      for (const attr of badAttributes) {\n        element.removeAttribute(attr);\n      }\n      if (metadata.length > 0) {\n        if (useDomParts) {\n          new NodePart(root!, element, {metadata});\n        } else {\n          element.before(new Comment(`?node-part ${metadata.join(' ')} ?`));\n        }\n      }\n    }\n    node = treeWalker.nextNode();\n  }\n  return template;\n}\n"],"names":["templateFromLiterals","strings","type","HTML_RESULT","useDomParts","html","attrNames","getTemplateHtml","attrNameIdx","template","document","createElement","innerHTML","treeWalker","createTreeWalker","content","root","node","nextNode","getPartRoot","nodeType","Node","COMMENT_NODE","comment","test","data","before","Text","after","ChildNodePart","remove","Comment","ELEMENT_NODE","element","metadata","badAttributes","attr","attributes","name","push","match","regex","endMatched","_","bindingStart","lit","end","value","matchAll","undefined","JSON","stringify","removeAttribute","length","NodePart","join"],"mappings":";;;;;GAqFM,SAAUA,EACdC,EACAC,EAAmBC,EACnBC,GAEA,MAAOC,EAAMC,GAAaC,EAAgBN,EAASC,GACnD,IAAIM,EAAc,EAClB,MAAMC,EAAWC,SAASC,cAAc,YACxCF,EAASG,UAAYP,EACrB,MAAMQ,EAAaH,SAASI,iBAAiBL,EAASM,SACtD,IACIC,EADAC,EAAoBJ,EAAWK,WAKnC,IAHId,IACFY,EAAOP,EAASM,QAAQI,eAEV,OAATF,GAAe,CACpB,GAAIA,EAAKG,WAAaC,KAAKC,aAAc,CACvC,MAAMC,EAAUN,EAChB,GAAI,WAAWO,KAAKD,EAAQE,MAAO,CACjC,GAAIrB,EAAa,CACf,MAAMsB,EAAS,IAAIC,KACbC,EAAQ,IAAID,KAClBJ,EAAQG,OAAOA,GACfH,EAAQK,MAAMA,GACd,IAAIC,cAAcb,EAAOU,EAAQE,GACjCX,EAAOJ,EAAWK,WAClBK,EAAQO,SACR,QACD,CACCP,EAAQE,KAAO,oBACfF,EAAQK,MAAM,IAAIG,QAAQ,sBAE7B,CACF,MAAM,GAAId,EAAKG,WAAaC,KAAKW,aAAc,CAC9C,MAAMC,EAAUhB,EACViB,EAAqB,GACrBC,EAA0B,GAChC,IAAK,MAAMC,KAAQH,EAAQI,WACzB,GAAI,gBAAgBb,KAAKY,EAAKE,MAC5BJ,EAASK,KAAK,KACdJ,EAAcI,KAAKH,EAAKE,WAI1B,GAAc,OADAF,EAAKE,KAAKE,MAAM,iBACV,CAClBN,EAASK,KAAK,OAAQjC,EAAUE,IAChCA,IAEA,MAAMiC,EAAQ,iDACd,IAAIC,GAAa,EACjB,IAAK,MAAOC,EAAGC,EAAcC,EAAKC,KAAQV,EAAKW,MAAMC,SACnDP,QAEqBQ,IAAjBL,EACFV,EAASK,KAAK,WACGU,IAARJ,EACTX,EAASK,KAAKW,KAAKC,UAAUN,KAE7BX,EAASK,KAAKW,KAAKC,UAAUL,IAC7BJ,GAAa,IAGE,IAAfA,GACFR,EAASK,KAAK,MAEhBJ,EAAcI,KAAKH,EAAKE,KACzB,CAEH,IAAK,MAAMF,KAAQD,EACjBF,EAAQmB,gBAAgBhB,GAEtBF,EAASmB,OAAS,IAChBjD,EACF,IAAIkD,SAAStC,EAAOiB,EAAS,CAACC,aAE9BD,EAAQP,OAAO,IAAIK,QAAQ,cAAcG,EAASqB,KAAK,WAG5D,CACDtC,EAAOJ,EAAWK,UACnB,CACD,OAAOT,CACT"}